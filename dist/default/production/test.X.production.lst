

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 01 14:25:20 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F2553 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _PORTB	set	3969
    56  0000                     _PORTA	set	3968
    57  0000                     _TRISC	set	3988
    58  0000                     _TRISB	set	3987
    59  0000                     _TRISA	set	3986
    60  0000                     _ADCON1	set	4033
    61  0000                     _PORTBbits	set	3969
    62  0000                     _PORTAbits	set	3968
    63  0000                     _PORTC	set	3970
    64                           
    65                           ; #config settings
    66                           
    67                           	psect	cinit
    68  007B50                     __pcinit:
    69                           	opt stack 0
    70  007B50                     start_initialization:
    71                           	opt stack 0
    72  007B50                     __initialization:
    73                           	opt stack 0
    74  007B50                     end_of_initialization:
    75                           	opt stack 0
    76  007B50                     __end_of__initialization:
    77                           	opt stack 0
    78  007B50  0100               	movlb	0
    79  007B52  EF9E  F03E         	goto	_main	;jump to C main() function
    80                           
    81                           	psect	cstackCOMRAM
    82  000001                     __pcstackCOMRAM:
    83                           	opt stack 0
    84  000001                     wait00@k:
    85                           	opt stack 0
    86                           
    87                           ; 2 bytes @ 0x0
    88  000001                     	ds	2
    89  000003                     ??_wait00:
    90                           
    91                           ; 1 bytes @ 0x2
    92  000003                     	ds	1
    93  000004                     wait00@j:
    94                           	opt stack 0
    95                           
    96                           ; 2 bytes @ 0x3
    97  000004                     	ds	2
    98  000006                     wait00@i:
    99                           	opt stack 0
   100                           
   101                           ; 2 bytes @ 0x5
   102  000006                     	ds	2
   103  000008                     main@strght:
   104                           	opt stack 0
   105                           
   106                           ; 2 bytes @ 0x7
   107  000008                     	ds	2
   108  00000A                     main@last:
   109                           	opt stack 0
   110                           
   111                           ; 2 bytes @ 0x9
   112  00000A                     	ds	2
   113  00000C                     main@map:
   114                           	opt stack 0
   115                           
   116                           ; 2 bytes @ 0xB
   117  00000C                     	ds	2
   118  00000E                     main@right:
   119                           	opt stack 0
   120                           
   121                           ; 2 bytes @ 0xD
   122  00000E                     	ds	2
   123  000010                     main@left:
   124                           	opt stack 0
   125                           
   126                           ; 2 bytes @ 0xF
   127  000010                     	ds	2
   128                           
   129 ;;
   130 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   131 ;;
   132 ;; *************** function _main *****************
   133 ;; Defined at:
   134 ;;		line 89 in file "sample.c"
   135 ;; Parameters:    Size  Location     Type
   136 ;;		None
   137 ;; Auto vars:     Size  Location     Type
   138 ;;  left            2   15[COMRAM] int 
   139 ;;  right           2   13[COMRAM] int 
   140 ;;  map             2   11[COMRAM] int 
   141 ;;  last            2    9[COMRAM] int 
   142 ;;  strght          2    7[COMRAM] int 
   143 ;; Return value:  Size  Location     Type
   144 ;;                  2   57[None  ] int 
   145 ;; Registers used:
   146 ;;		wreg, status,2, status,0, cstack
   147 ;; Tracked objects:
   148 ;;		On entry : 0/0
   149 ;;		On exit  : 0/0
   150 ;;		Unchanged: 0/0
   151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   152 ;;      Params:         0       0       0       0       0       0       0       0       0
   153 ;;      Locals:        10       0       0       0       0       0       0       0       0
   154 ;;      Temps:          0       0       0       0       0       0       0       0       0
   155 ;;      Totals:        10       0       0       0       0       0       0       0       0
   156 ;;Total ram usage:       10 bytes
   157 ;; Hardware stack levels required when called:    2
   158 ;; This function calls:
   159 ;;		_fast_straight
   160 ;;		_led_sens
   161 ;;		_left_down
   162 ;;		_mini_left_down
   163 ;;		_mini_right_down
   164 ;;		_right_down
   165 ;;		_small_left_down
   166 ;;		_small_right_down
   167 ;;		_straight
   168 ;; This function is called by:
   169 ;;		Startup code after reset
   170 ;; This function uses a non-reentrant model
   171 ;;
   172                           
   173                           	psect	text0
   174  007D3C                     __ptext0:
   175                           	opt stack 0
   176  007D3C                     _main:
   177                           	opt stack 29
   178                           
   179                           ;sample.c: 91: int last, right=1, left=0, strght=2, map=-1;
   180                           
   181                           ;incstack = 0
   182  007D3C  0E00               	movlw	0
   183  007D3E  6E0F               	movwf	main@right+1,c
   184  007D40  0E01               	movlw	1
   185  007D42  6E0E               	movwf	main@right,c
   186  007D44  0E00               	movlw	0
   187  007D46  6E11               	movwf	main@left+1,c
   188  007D48  0E00               	movlw	0
   189  007D4A  6E10               	movwf	main@left,c
   190  007D4C  0E00               	movlw	0
   191  007D4E  6E09               	movwf	main@strght+1,c
   192  007D50  0E02               	movlw	2
   193  007D52  6E08               	movwf	main@strght,c
   194  007D54  680C               	setf	main@map,c
   195  007D56  680D               	setf	main@map+1,c
   196                           
   197                           ;sample.c: 93: ADCON1 = 0x0F;
   198  007D58  0E0F               	movlw	15
   199  007D5A  6EC1               	movwf	4033,c	;volatile
   200                           
   201                           ;sample.c: 97: TRISA = 0x20;
   202  007D5C  0E20               	movlw	32
   203  007D5E  6E92               	movwf	3986,c	;volatile
   204                           
   205                           ;sample.c: 98: TRISB = 0xFF;
   206  007D60  6893               	setf	3987,c	;volatile
   207                           
   208                           ;sample.c: 99: TRISC = 0x00;
   209  007D62  0E00               	movlw	0
   210  007D64  6E94               	movwf	3988,c	;volatile
   211                           
   212                           ;sample.c: 102: PORTA = 0x00;
   213  007D66  0E00               	movlw	0
   214  007D68  6E80               	movwf	3968,c	;volatile
   215                           
   216                           ;sample.c: 103: PORTB = 0x00;
   217  007D6A  0E00               	movlw	0
   218  007D6C  6E81               	movwf	3969,c	;volatile
   219                           
   220                           ;sample.c: 104: PORTC = 0x00;
   221  007D6E  0E00               	movlw	0
   222  007D70  6E82               	movwf	3970,c	;volatile
   223                           
   224                           ;sample.c: 107: while(PORTAbits.RA5==1){
   225  007D72  D002               	goto	l58
   226  007D74                     
   227                           ;sample.c: 108: led_sens();
   228  007D74  EC63  F03E         	call	_led_sens	;wreg free
   229  007D78                     l58:
   230  007D78  BA80               	btfsc	3968,5,c	;volatile
   231  007D7A  D7FC               	goto	l59
   232  007D7C                     u1200:
   233                           
   234                           ;sample.c: 113: led_sens();
   235                           
   236                           ;sample.c: 109: }
   237                           ;sample.c: 112: while(1){
   238  007D7C  EC63  F03E         	call	_led_sens	;wreg free
   239                           
   240                           ;sample.c: 116: if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORTBbits
      +                          .RB3==1 && PORTBbits.RB4==0){
   241  007D80  B081               	btfsc	3969,0,c	;volatile
   242  007D82  A281               	btfss	3969,1,c	;volatile
   243  007D84  D00D               	goto	l62
   244  007D86  B481               	btfsc	3969,2,c	;volatile
   245  007D88  A681               	btfss	3969,3,c	;volatile
   246  007D8A  D00A               	goto	l62
   247  007D8C  B881               	btfsc	3969,4,c	;volatile
   248  007D8E  D008               	goto	l62
   249                           
   250                           ;sample.c: 118: right_down();
   251  007D90  EC18  F03E         	call	_right_down	;wreg free
   252  007D94  D063               	goto	l1367
   253  007D96                     l1263:
   254                           
   255                           ;sample.c: 120: map=1;
   256  007D96  0E00               	movlw	0
   257  007D98  6E0D               	movwf	main@map+1,c
   258  007D9A  0E01               	movlw	1
   259  007D9C                     L1:
   260  007D9C  6E0C               	movwf	main@map,c
   261                           
   262                           ;sample.c: 121: }
   263  007D9E  D7EE               	goto	u1200
   264  007DA0                     l62:
   265                           
   266                           ;sample.c: 122: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0){
   267  007DA0  B081               	btfsc	3969,0,c	;volatile
   268  007DA2  A281               	btfss	3969,1,c	;volatile
   269  007DA4  D00F               	goto	l64
   270  007DA6  B481               	btfsc	3969,2,c	;volatile
   271  007DA8  B681               	btfsc	3969,3,c	;volatile
   272  007DAA  D00C               	goto	l64
   273  007DAC  B881               	btfsc	3969,4,c	;volatile
   274  007DAE  D00A               	goto	l64
   275                           
   276                           ;sample.c: 124: if(map == 0)
   277  007DB0  500C               	movf	main@map,w,c
   278  007DB2  100D               	iorwf	main@map+1,w,c
   279  007DB4  A4D8               	btfss	status,2,c
   280  007DB6  D003               	goto	l65
   281                           
   282                           ;sample.c: 125: small_left_down();
   283  007DB8  EC31  F03E         	call	_small_left_down	;wreg free
   284  007DBC  D7DF               	goto	u1200
   285  007DBE                     l65:
   286                           
   287                           ;sample.c: 126: else{
   288                           ;sample.c: 127: small_right_down();
   289  007DBE  EC4A  F03E         	call	_small_right_down	;wreg free
   290  007DC2  D04C               	goto	l1367
   291  007DC4                     l64:
   292                           
   293                           ;sample.c: 132: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1){
   294  007DC4  B081               	btfsc	3969,0,c	;volatile
   295  007DC6  A281               	btfss	3969,1,c	;volatile
   296  007DC8  D00C               	goto	l68
   297  007DCA  A481               	btfss	3969,2,c	;volatile
   298  007DCC  A681               	btfss	3969,3,c	;volatile
   299  007DCE  D009               	goto	l68
   300  007DD0  A881               	btfss	3969,4,c	;volatile
   301  007DD2  D007               	goto	l68
   302                           
   303                           ;sample.c: 134: fast_straight();
   304  007DD4  ECAB  F03D         	call	_fast_straight	;wreg free
   305                           
   306                           ;sample.c: 135: last=strght;
   307  007DD8  C008  F00A         	movff	main@strght,main@last
   308  007DDC  C009  F00B         	movff	main@strght+1,main@last+1
   309  007DE0  D7DA               	goto	l1263
   310  007DE2                     l68:
   311                           
   312                           ;sample.c: 139: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1){
   313  007DE2  A081               	btfss	3969,0,c	;volatile
   314  007DE4  B281               	btfsc	3969,1,c	;volatile
   315  007DE6  D00F               	goto	l70
   316  007DE8  B481               	btfsc	3969,2,c	;volatile
   317  007DEA  A681               	btfss	3969,3,c	;volatile
   318  007DEC  D00C               	goto	l70
   319  007DEE  A881               	btfss	3969,4,c	;volatile
   320  007DF0  D00A               	goto	l70
   321                           
   322                           ;sample.c: 141: if(map == 0)
   323  007DF2  500C               	movf	main@map,w,c
   324  007DF4  100D               	iorwf	main@map+1,w,c
   325  007DF6  A4D8               	btfss	status,2,c
   326  007DF8  D003               	goto	l71
   327                           
   328                           ;sample.c: 142: small_right_down();
   329  007DFA  EC4A  F03E         	call	_small_right_down	;wreg free
   330  007DFE  D7BE               	goto	u1200
   331  007E00                     l71:
   332                           
   333                           ;sample.c: 143: else{
   334                           ;sample.c: 144: small_left_down();
   335  007E00  EC31  F03E         	call	_small_left_down	;wreg free
   336  007E04  D03A               	goto	l1381
   337  007E06                     l70:
   338                           
   339                           ;sample.c: 149: else if(PORTBbits.RB0==0 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1){
   340  007E06  A081               	btfss	3969,0,c	;volatile
   341  007E08  A281               	btfss	3969,1,c	;volatile
   342  007E0A  D008               	goto	l74
   343  007E0C  B481               	btfsc	3969,2,c	;volatile
   344  007E0E  A681               	btfss	3969,3,c	;volatile
   345  007E10  D005               	goto	l74
   346  007E12  A881               	btfss	3969,4,c	;volatile
   347  007E14  D003               	goto	l74
   348                           
   349                           ;sample.c: 151: left_down();
   350  007E16  ECCD  F03D         	call	_left_down	;wreg free
   351  007E1A  D02F               	goto	l1381
   352  007E1C                     l74:
   353                           
   354                           ;sample.c: 156: else if(PORTBbits.RB0==1 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1) {mini_left_down();last=left;map = 1;}
   355  007E1C  B081               	btfsc	3969,0,c	;volatile
   356  007E1E  B281               	btfsc	3969,1,c	;volatile
   357  007E20  D008               	goto	l76
   358  007E22  A481               	btfss	3969,2,c	;volatile
   359  007E24  A681               	btfss	3969,3,c	;volatile
   360  007E26  D005               	goto	l76
   361  007E28  A881               	btfss	3969,4,c	;volatile
   362  007E2A  D003               	goto	l76
   363  007E2C  ECE6  F03D         	call	_mini_left_down	;wreg free
   364  007E30  D024               	goto	l1381
   365  007E32                     l76:
   366                           
   367                           ;sample.c: 157: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==1) {mini_right_down();last=right; map = 1;}
   368  007E32  B081               	btfsc	3969,0,c	;volatile
   369  007E34  A281               	btfss	3969,1,c	;volatile
   370  007E36  D008               	goto	l78
   371  007E38  A481               	btfss	3969,2,c	;volatile
   372  007E3A  B681               	btfsc	3969,3,c	;volatile
   373  007E3C  D005               	goto	l78
   374  007E3E  A881               	btfss	3969,4,c	;volatile
   375  007E40  D003               	goto	l78
   376  007E42  ECFF  F03D         	call	_mini_right_down	;wreg free
   377  007E46  D00A               	goto	l1367
   378  007E48                     l78:
   379                           
   380                           ;sample.c: 158: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==1) {mini_right_down();last=right; map = 1;}
   381  007E48  B081               	btfsc	3969,0,c	;volatile
   382  007E4A  A281               	btfss	3969,1,c	;volatile
   383  007E4C  D00C               	goto	l80
   384  007E4E  B481               	btfsc	3969,2,c	;volatile
   385  007E50  B681               	btfsc	3969,3,c	;volatile
   386  007E52  D009               	goto	l80
   387  007E54  A881               	btfss	3969,4,c	;volatile
   388  007E56  D007               	goto	l80
   389  007E58  ECFF  F03D         	call	_mini_right_down	;wreg free
   390  007E5C                     l1367:
   391  007E5C  C00E  F00A         	movff	main@right,main@last
   392  007E60  C00F  F00B         	movff	main@right+1,main@last+1
   393  007E64  D798               	goto	l1263
   394  007E66                     l80:
   395                           
   396                           ;sample.c: 159: else if(PORTBbits.RB0==1 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1) {mini_left_down();last=left;map = 1;}
   397  007E66  B081               	btfsc	3969,0,c	;volatile
   398  007E68  B281               	btfsc	3969,1,c	;volatile
   399  007E6A  D00C               	goto	l82
   400  007E6C  B481               	btfsc	3969,2,c	;volatile
   401  007E6E  A681               	btfss	3969,3,c	;volatile
   402  007E70  D009               	goto	l82
   403  007E72  A881               	btfss	3969,4,c	;volatile
   404  007E74  D007               	goto	l82
   405  007E76  ECE6  F03D         	call	_mini_left_down	;wreg free
   406  007E7A                     l1381:
   407  007E7A  C010  F00A         	movff	main@left,main@last
   408  007E7E  C011  F00B         	movff	main@left+1,main@last+1
   409  007E82  D789               	goto	l1263
   410  007E84                     l82:
   411                           
   412                           ;sample.c: 162: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==1){
   413  007E84  A081               	btfss	3969,0,c	;volatile
   414  007E86  B281               	btfsc	3969,1,c	;volatile
   415  007E88  D00C               	goto	l84
   416  007E8A  A481               	btfss	3969,2,c	;volatile
   417  007E8C  B681               	btfsc	3969,3,c	;volatile
   418  007E8E  D009               	goto	l84
   419  007E90  A881               	btfss	3969,4,c	;volatile
   420  007E92  D007               	goto	l84
   421                           
   422                           ;sample.c: 164: right_down();
   423  007E94  EC18  F03E         	call	_right_down	;wreg free
   424  007E98  D071               	goto	l1515
   425  007E9A                     l1397:
   426                           
   427                           ;sample.c: 166: map = 0;
   428  007E9A  0E00               	movlw	0
   429  007E9C  6E0D               	movwf	main@map+1,c
   430  007E9E  0E00               	movlw	0
   431  007EA0  D77D               	goto	L1
   432  007EA2                     l84:
   433                           
   434                           ;sample.c: 169: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1){
   435  007EA2  A081               	btfss	3969,0,c	;volatile
   436  007EA4  B281               	btfsc	3969,1,c	;volatile
   437  007EA6  D00F               	goto	l86
   438  007EA8  A481               	btfss	3969,2,c	;volatile
   439  007EAA  A681               	btfss	3969,3,c	;volatile
   440  007EAC  D00C               	goto	l86
   441  007EAE  A881               	btfss	3969,4,c	;volatile
   442  007EB0  D00A               	goto	l86
   443                           
   444                           ;sample.c: 171: if(map == 1)
   445  007EB2  040C               	decf	main@map,w,c
   446  007EB4  100D               	iorwf	main@map+1,w,c
   447  007EB6  A4D8               	btfss	status,2,c
   448  007EB8  D003               	goto	l87
   449                           
   450                           ;sample.c: 172: small_left_down();
   451  007EBA  EC31  F03E         	call	_small_left_down	;wreg free
   452  007EBE  D75E               	goto	u1200
   453  007EC0                     l87:
   454                           
   455                           ;sample.c: 173: else{
   456                           ;sample.c: 174: small_right_down();
   457  007EC0  EC4A  F03E         	call	_small_right_down	;wreg free
   458  007EC4  D05B               	goto	l1515
   459  007EC6                     l86:
   460                           
   461                           ;sample.c: 179: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0){
   462  007EC6  A081               	btfss	3969,0,c	;volatile
   463  007EC8  B281               	btfsc	3969,1,c	;volatile
   464  007ECA  D00C               	goto	l90
   465  007ECC  B481               	btfsc	3969,2,c	;volatile
   466  007ECE  B681               	btfsc	3969,3,c	;volatile
   467  007ED0  D009               	goto	l90
   468  007ED2  B881               	btfsc	3969,4,c	;volatile
   469  007ED4  D007               	goto	l90
   470                           
   471                           ;sample.c: 181: fast_straight(); last=strght;map = 0;}
   472  007ED6  ECAB  F03D         	call	_fast_straight	;wreg free
   473  007EDA  C008  F00A         	movff	main@strght,main@last
   474  007EDE  C009  F00B         	movff	main@strght+1,main@last+1
   475  007EE2  D7DB               	goto	l1397
   476  007EE4                     l90:
   477                           
   478                           ;sample.c: 183: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0){
   479  007EE4  B081               	btfsc	3969,0,c	;volatile
   480  007EE6  A281               	btfss	3969,1,c	;volatile
   481  007EE8  D00F               	goto	l92
   482  007EEA  A481               	btfss	3969,2,c	;volatile
   483  007EEC  B681               	btfsc	3969,3,c	;volatile
   484  007EEE  D00C               	goto	l92
   485  007EF0  B881               	btfsc	3969,4,c	;volatile
   486  007EF2  D00A               	goto	l92
   487                           
   488                           ;sample.c: 185: if(map == 1) small_right_down();
   489  007EF4  040C               	decf	main@map,w,c
   490  007EF6  100D               	iorwf	main@map+1,w,c
   491  007EF8  A4D8               	btfss	status,2,c
   492  007EFA  D003               	goto	l93
   493  007EFC  EC4A  F03E         	call	_small_right_down	;wreg free
   494  007F00  D73D               	goto	u1200
   495  007F02                     l93:
   496                           
   497                           ;sample.c: 186: else{
   498                           ;sample.c: 187: small_left_down();
   499  007F02  EC31  F03E         	call	_small_left_down	;wreg free
   500  007F06  D02B               	goto	l1501
   501  007F08                     l92:
   502                           
   503                           ;sample.c: 192: else if(PORTBbits.RB0==1 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0){
   504  007F08  B081               	btfsc	3969,0,c	;volatile
   505  007F0A  B281               	btfsc	3969,1,c	;volatile
   506  007F0C  D008               	goto	l96
   507  007F0E  A481               	btfss	3969,2,c	;volatile
   508  007F10  B681               	btfsc	3969,3,c	;volatile
   509  007F12  D005               	goto	l96
   510  007F14  B881               	btfsc	3969,4,c	;volatile
   511  007F16  D003               	goto	l96
   512                           
   513                           ;sample.c: 194: left_down();
   514  007F18  ECCD  F03D         	call	_left_down	;wreg free
   515  007F1C  D020               	goto	l1501
   516  007F1E                     l96:
   517                           
   518                           ;sample.c: 199: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==0) {mini_right_down();last=right;map = 0;}
   519  007F1E  A081               	btfss	3969,0,c	;volatile
   520  007F20  B281               	btfsc	3969,1,c	;volatile
   521  007F22  D008               	goto	l98
   522  007F24  B481               	btfsc	3969,2,c	;volatile
   523  007F26  A681               	btfss	3969,3,c	;volatile
   524  007F28  D005               	goto	l98
   525  007F2A  B881               	btfsc	3969,4,c	;volatile
   526  007F2C  D003               	goto	l98
   527  007F2E  ECFF  F03D         	call	_mini_right_down	;wreg free
   528  007F32  D024               	goto	l1515
   529  007F34                     l98:
   530                           
   531                           ;sample.c: 200: else if(PORTBbits.RB0==0 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0) {mini_left_down();last=left;map = 0;}
   532  007F34  A081               	btfss	3969,0,c	;volatile
   533  007F36  A281               	btfss	3969,1,c	;volatile
   534  007F38  D008               	goto	l100
   535  007F3A  B481               	btfsc	3969,2,c	;volatile
   536  007F3C  B681               	btfsc	3969,3,c	;volatile
   537  007F3E  D005               	goto	l100
   538  007F40  B881               	btfsc	3969,4,c	;volatile
   539  007F42  D003               	goto	l100
   540  007F44  ECE6  F03D         	call	_mini_left_down	;wreg free
   541  007F48  D00A               	goto	l1501
   542  007F4A                     l100:
   543                           
   544                           ;sample.c: 201: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==0) {mini_right_down();last=left;map = 0;}
   545  007F4A  A081               	btfss	3969,0,c	;volatile
   546  007F4C  B281               	btfsc	3969,1,c	;volatile
   547  007F4E  D00C               	goto	l102
   548  007F50  A481               	btfss	3969,2,c	;volatile
   549  007F52  A681               	btfss	3969,3,c	;volatile
   550  007F54  D009               	goto	l102
   551  007F56  B881               	btfsc	3969,4,c	;volatile
   552  007F58  D007               	goto	l102
   553  007F5A  ECFF  F03D         	call	_mini_right_down	;wreg free
   554  007F5E                     l1501:
   555  007F5E  C010  F00A         	movff	main@left,main@last
   556  007F62  C011  F00B         	movff	main@left+1,main@last+1
   557  007F66  D799               	goto	l1397
   558  007F68                     l102:
   559                           
   560                           ;sample.c: 202: else if(PORTBbits.RB0==0 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0) {mini_left_down();last=right;map = 0;}
   561  007F68  A081               	btfss	3969,0,c	;volatile
   562  007F6A  A281               	btfss	3969,1,c	;volatile
   563  007F6C  D00C               	goto	l104
   564  007F6E  A481               	btfss	3969,2,c	;volatile
   565  007F70  B681               	btfsc	3969,3,c	;volatile
   566  007F72  D009               	goto	l104
   567  007F74  B881               	btfsc	3969,4,c	;volatile
   568  007F76  D007               	goto	l104
   569  007F78  ECE6  F03D         	call	_mini_left_down	;wreg free
   570  007F7C                     l1515:
   571  007F7C  C00E  F00A         	movff	main@right,main@last
   572  007F80  C00F  F00B         	movff	main@right+1,main@last+1
   573  007F84  D78A               	goto	l1397
   574  007F86                     l104:
   575                           
   576                           ;sample.c: 205: else if((PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==0)||
   577                           ;sample.c: 206: (PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORTBbits.R
      +                          B3==1 && PORTBbits.RB4==1)){
   578  007F86  A081               	btfss	3969,0,c	;volatile
   579  007F88  B281               	btfsc	3969,1,c	;volatile
   580  007F8A  D005               	goto	u2190
   581  007F8C  A481               	btfss	3969,2,c	;volatile
   582  007F8E  B681               	btfsc	3969,3,c	;volatile
   583  007F90  D002               	goto	u2190
   584  007F92  A881               	btfss	3969,4,c	;volatile
   585  007F94  D008               	goto	u2240
   586  007F96                     u2190:
   587  007F96  B081               	btfsc	3969,0,c	;volatile
   588  007F98  A281               	btfss	3969,1,c	;volatile
   589  007F9A  D02F               	goto	l106
   590  007F9C  B481               	btfsc	3969,2,c	;volatile
   591  007F9E  A681               	btfss	3969,3,c	;volatile
   592  007FA0  D02C               	goto	l106
   593  007FA2  A881               	btfss	3969,4,c	;volatile
   594  007FA4  D02A               	goto	l106
   595  007FA6                     u2240:
   596                           
   597                           ;sample.c: 207: if(last==right) {
   598  007FA6  500E               	movf	main@right,w,c
   599  007FA8  180A               	xorwf	main@last,w,c
   600  007FAA  E10B               	bnz	l1541
   601  007FAC  500F               	movf	main@right+1,w,c
   602  007FAE  180B               	xorwf	main@last+1,w,c
   603  007FB0  A4D8               	btfss	status,2,c
   604  007FB2  D007               	goto	l111
   605                           
   606                           ;sample.c: 208: right_down();
   607  007FB4  EC18  F03E         	call	_right_down	;wreg free
   608                           
   609                           ;sample.c: 209: last=right;
   610  007FB8  C00E  F00A         	movff	main@right,main@last
   611  007FBC  C00F  F00B         	movff	main@right+1,main@last+1
   612                           
   613                           ;sample.c: 210: }
   614  007FC0  D6DD               	goto	u1200
   615  007FC2                     l111:
   616  007FC2                     l1541:
   617                           
   618                           ;sample.c: 211: else if (last==left) {
   619  007FC2  5010               	movf	main@left,w,c
   620  007FC4  180A               	xorwf	main@last,w,c
   621  007FC6  E10B               	bnz	l1547
   622  007FC8  5011               	movf	main@left+1,w,c
   623  007FCA  180B               	xorwf	main@last+1,w,c
   624  007FCC  A4D8               	btfss	status,2,c
   625  007FCE  D007               	goto	l113
   626                           
   627                           ;sample.c: 212: left_down();
   628  007FD0  ECCD  F03D         	call	_left_down	;wreg free
   629                           
   630                           ;sample.c: 213: last=left;
   631  007FD4  C010  F00A         	movff	main@left,main@last
   632  007FD8  C011  F00B         	movff	main@left+1,main@last+1
   633                           
   634                           ;sample.c: 214: }
   635  007FDC  D6CF               	goto	u1200
   636  007FDE                     l113:
   637  007FDE                     l1547:
   638                           
   639                           ;sample.c: 215: else if (last==strght) {
   640  007FDE  5008               	movf	main@strght,w,c
   641  007FE0  180A               	xorwf	main@last,w,c
   642  007FE2  E103               	bnz	u2271
   643  007FE4  5009               	movf	main@strght+1,w,c
   644  007FE6  180B               	xorwf	main@last+1,w,c
   645  007FE8  A4D8               	btfss	status,2,c
   646  007FEA                     u2271:
   647  007FEA  D6C8               	goto	u1200
   648                           
   649                           ;sample.c: 216: straight();
   650  007FEC  ECBC  F03D         	call	_straight	;wreg free
   651                           
   652                           ;sample.c: 217: last=strght;
   653  007FF0  C008  F00A         	movff	main@strght,main@last
   654  007FF4  C009  F00B         	movff	main@strght+1,main@last+1
   655                           
   656                           ;sample.c: 218: }
   657                           ;sample.c: 219: }
   658  007FF8  D6C1               	goto	u1200
   659  007FFA                     l106:
   660                           
   661                           ;sample.c: 220: else {
   662                           ;sample.c: 221: straight();
   663  007FFA  ECBC  F03D         	call	_straight	;wreg free
   664  007FFE  D6BE               	goto	u1200
   665  008000                     __end_of_main:
   666                           	opt stack 0
   667                           status	equ	0xFD8
   668                           
   669 ;; *************** function _straight *****************
   670 ;; Defined at:
   671 ;;		line 68 in file "sample.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;		None
   676 ;; Return value:  Size  Location     Type
   677 ;;                  2   46[None  ] int 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   685 ;;      Params:         0       0       0       0       0       0       0       0       0
   686 ;;      Locals:         0       0       0       0       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0       0       0
   688 ;;      Totals:         0       0       0       0       0       0       0       0       0
   689 ;;Total ram usage:        0 bytes
   690 ;; Hardware stack levels used:    1
   691 ;; Hardware stack levels required when called:    1
   692 ;; This function calls:
   693 ;;		_wait00
   694 ;; This function is called by:
   695 ;;		_main
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           	psect	text1
   700  007B78                     __ptext1:
   701                           	opt stack 0
   702  007B78                     _straight:
   703                           	opt stack 29
   704                           
   705                           ;sample.c: 69: PORTC=0x03;
   706                           
   707                           ;incstack = 0
   708  007B78  0E03               	movlw	3
   709  007B7A  6E82               	movwf	3970,c	;volatile
   710                           
   711                           ;sample.c: 70: wait00(10);
   712  007B7C  0E00               	movlw	0
   713  007B7E  6E02               	movwf	wait00@k+1,c
   714  007B80  0E0A               	movlw	10
   715  007B82  6E01               	movwf	wait00@k,c
   716  007B84  EC7D  F03E         	call	_wait00	;wreg free
   717                           
   718                           ;sample.c: 71: PORTC=0x00;
   719  007B88  0E00               	movlw	0
   720  007B8A  6E82               	movwf	3970,c	;volatile
   721                           
   722                           ;sample.c: 72: wait00(10);
   723  007B8C  0E00               	movlw	0
   724  007B8E  6E02               	movwf	wait00@k+1,c
   725  007B90  0E0A               	movlw	10
   726  007B92  6E01               	movwf	wait00@k,c
   727  007B94  EC7D  F03E         	call	_wait00	;wreg free
   728  007B98  0012               	return		;funcret
   729  007B9A                     __end_of_straight:
   730                           	opt stack 0
   731                           status	equ	0xFD8
   732                           
   733 ;; *************** function _small_right_down *****************
   734 ;; Defined at:
   735 ;;		line 44 in file "sample.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;		None
   738 ;; Auto vars:     Size  Location     Type
   739 ;;		None
   740 ;; Return value:  Size  Location     Type
   741 ;;                  2   37[None  ] int 
   742 ;; Registers used:
   743 ;;		wreg, status,2, status,0, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   749 ;;      Params:         0       0       0       0       0       0       0       0       0
   750 ;;      Locals:         0       0       0       0       0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0       0       0
   752 ;;      Totals:         0       0       0       0       0       0       0       0       0
   753 ;;Total ram usage:        0 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; Hardware stack levels required when called:    1
   756 ;; This function calls:
   757 ;;		_wait00
   758 ;; This function is called by:
   759 ;;		_main
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text2
   764  007C94                     __ptext2:
   765                           	opt stack 0
   766  007C94                     _small_right_down:
   767                           	opt stack 29
   768                           
   769                           ;sample.c: 45: PORTC=0x03;
   770                           
   771                           ;incstack = 0
   772  007C94  0E03               	movlw	3
   773  007C96  6E82               	movwf	3970,c	;volatile
   774                           
   775                           ;sample.c: 46: wait00(0.3);
   776  007C98  0E00               	movlw	0
   777  007C9A  6E02               	movwf	wait00@k+1,c
   778  007C9C  0E00               	movlw	0
   779  007C9E  6E01               	movwf	wait00@k,c
   780  007CA0  EC7D  F03E         	call	_wait00	;wreg free
   781                           
   782                           ;sample.c: 47: PORTC=0x01;
   783  007CA4  0E01               	movlw	1
   784  007CA6  6E82               	movwf	3970,c	;volatile
   785                           
   786                           ;sample.c: 48: wait00(8);
   787  007CA8  0E00               	movlw	0
   788  007CAA  6E02               	movwf	wait00@k+1,c
   789  007CAC  0E08               	movlw	8
   790  007CAE  6E01               	movwf	wait00@k,c
   791  007CB0  EC7D  F03E         	call	_wait00	;wreg free
   792                           
   793                           ;sample.c: 49: PORTC=0x00;
   794  007CB4  0E00               	movlw	0
   795  007CB6  6E82               	movwf	3970,c	;volatile
   796                           
   797                           ;sample.c: 50: wait00(16);
   798  007CB8  0E00               	movlw	0
   799  007CBA  6E02               	movwf	wait00@k+1,c
   800  007CBC  0E10               	movlw	16
   801  007CBE  6E01               	movwf	wait00@k,c
   802  007CC0  EC7D  F03E         	call	_wait00	;wreg free
   803  007CC4  0012               	return		;funcret
   804  007CC6                     __end_of_small_right_down:
   805                           	opt stack 0
   806                           status	equ	0xFD8
   807                           
   808 ;; *************** function _small_left_down *****************
   809 ;; Defined at:
   810 ;;		line 26 in file "sample.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  2   31[None  ] int 
   817 ;; Registers used:
   818 ;;		wreg, status,2, status,0, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   824 ;;      Params:         0       0       0       0       0       0       0       0       0
   825 ;;      Locals:         0       0       0       0       0       0       0       0       0
   826 ;;      Temps:          0       0       0       0       0       0       0       0       0
   827 ;;      Totals:         0       0       0       0       0       0       0       0       0
   828 ;;Total ram usage:        0 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    1
   831 ;; This function calls:
   832 ;;		_wait00
   833 ;; This function is called by:
   834 ;;		_main
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           	psect	text3
   839  007C62                     __ptext3:
   840                           	opt stack 0
   841  007C62                     _small_left_down:
   842                           	opt stack 29
   843                           
   844                           ;sample.c: 27: PORTC=0x03;
   845                           
   846                           ;incstack = 0
   847  007C62  0E03               	movlw	3
   848  007C64  6E82               	movwf	3970,c	;volatile
   849                           
   850                           ;sample.c: 28: wait00(0.3);
   851  007C66  0E00               	movlw	0
   852  007C68  6E02               	movwf	wait00@k+1,c
   853  007C6A  0E00               	movlw	0
   854  007C6C  6E01               	movwf	wait00@k,c
   855  007C6E  EC7D  F03E         	call	_wait00	;wreg free
   856                           
   857                           ;sample.c: 29: PORTC=0x02;
   858  007C72  0E02               	movlw	2
   859  007C74  6E82               	movwf	3970,c	;volatile
   860                           
   861                           ;sample.c: 30: wait00(8);
   862  007C76  0E00               	movlw	0
   863  007C78  6E02               	movwf	wait00@k+1,c
   864  007C7A  0E08               	movlw	8
   865  007C7C  6E01               	movwf	wait00@k,c
   866  007C7E  EC7D  F03E         	call	_wait00	;wreg free
   867                           
   868                           ;sample.c: 31: PORTC=0x00;
   869  007C82  0E00               	movlw	0
   870  007C84  6E82               	movwf	3970,c	;volatile
   871                           
   872                           ;sample.c: 32: wait00(16);
   873  007C86  0E00               	movlw	0
   874  007C88  6E02               	movwf	wait00@k+1,c
   875  007C8A  0E10               	movlw	16
   876  007C8C  6E01               	movwf	wait00@k,c
   877  007C8E  EC7D  F03E         	call	_wait00	;wreg free
   878  007C92  0012               	return		;funcret
   879  007C94                     __end_of_small_left_down:
   880                           	opt stack 0
   881                           status	equ	0xFD8
   882                           
   883 ;; *************** function _right_down *****************
   884 ;; Defined at:
   885 ;;		line 35 in file "sample.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;		None
   888 ;; Auto vars:     Size  Location     Type
   889 ;;		None
   890 ;; Return value:  Size  Location     Type
   891 ;;                  2   34[None  ] int 
   892 ;; Registers used:
   893 ;;		wreg, status,2, status,0, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   899 ;;      Params:         0       0       0       0       0       0       0       0       0
   900 ;;      Locals:         0       0       0       0       0       0       0       0       0
   901 ;;      Temps:          0       0       0       0       0       0       0       0       0
   902 ;;      Totals:         0       0       0       0       0       0       0       0       0
   903 ;;Total ram usage:        0 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; Hardware stack levels required when called:    1
   906 ;; This function calls:
   907 ;;		_wait00
   908 ;; This function is called by:
   909 ;;		_main
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text4
   914  007C30                     __ptext4:
   915                           	opt stack 0
   916  007C30                     _right_down:
   917                           	opt stack 29
   918                           
   919                           ;sample.c: 36: PORTC=0x03;
   920                           
   921                           ;incstack = 0
   922  007C30  0E03               	movlw	3
   923  007C32  6E82               	movwf	3970,c	;volatile
   924                           
   925                           ;sample.c: 37: wait00(0.3);
   926  007C34  0E00               	movlw	0
   927  007C36  6E02               	movwf	wait00@k+1,c
   928  007C38  0E00               	movlw	0
   929  007C3A  6E01               	movwf	wait00@k,c
   930  007C3C  EC7D  F03E         	call	_wait00	;wreg free
   931                           
   932                           ;sample.c: 38: PORTC=0x01;
   933  007C40  0E01               	movlw	1
   934  007C42  6E82               	movwf	3970,c	;volatile
   935                           
   936                           ;sample.c: 39: wait00(15);
   937  007C44  0E00               	movlw	0
   938  007C46  6E02               	movwf	wait00@k+1,c
   939  007C48  0E0F               	movlw	15
   940  007C4A  6E01               	movwf	wait00@k,c
   941  007C4C  EC7D  F03E         	call	_wait00	;wreg free
   942                           
   943                           ;sample.c: 40: PORTC=0x00;
   944  007C50  0E00               	movlw	0
   945  007C52  6E82               	movwf	3970,c	;volatile
   946                           
   947                           ;sample.c: 41: wait00(20);
   948  007C54  0E00               	movlw	0
   949  007C56  6E02               	movwf	wait00@k+1,c
   950  007C58  0E14               	movlw	20
   951  007C5A  6E01               	movwf	wait00@k,c
   952  007C5C  EC7D  F03E         	call	_wait00	;wreg free
   953  007C60  0012               	return		;funcret
   954  007C62                     __end_of_right_down:
   955                           	opt stack 0
   956                           status	equ	0xFD8
   957                           
   958 ;; *************** function _mini_right_down *****************
   959 ;; Defined at:
   960 ;;		line 60 in file "sample.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;		None
   963 ;; Auto vars:     Size  Location     Type
   964 ;;		None
   965 ;; Return value:  Size  Location     Type
   966 ;;                  2   43[None  ] int 
   967 ;; Registers used:
   968 ;;		wreg, status,2, status,0, cstack
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   974 ;;      Params:         0       0       0       0       0       0       0       0       0
   975 ;;      Locals:         0       0       0       0       0       0       0       0       0
   976 ;;      Temps:          0       0       0       0       0       0       0       0       0
   977 ;;      Totals:         0       0       0       0       0       0       0       0       0
   978 ;;Total ram usage:        0 bytes
   979 ;; Hardware stack levels used:    1
   980 ;; Hardware stack levels required when called:    1
   981 ;; This function calls:
   982 ;;		_wait00
   983 ;; This function is called by:
   984 ;;		_main
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           	psect	text5
   989  007BFE                     __ptext5:
   990                           	opt stack 0
   991  007BFE                     _mini_right_down:
   992                           	opt stack 29
   993                           
   994                           ;sample.c: 61: PORTC=0x03;
   995                           
   996                           ;incstack = 0
   997  007BFE  0E03               	movlw	3
   998  007C00  6E82               	movwf	3970,c	;volatile
   999                           
  1000                           ;sample.c: 62: wait00(0.3);
  1001  007C02  0E00               	movlw	0
  1002  007C04  6E02               	movwf	wait00@k+1,c
  1003  007C06  0E00               	movlw	0
  1004  007C08  6E01               	movwf	wait00@k,c
  1005  007C0A  EC7D  F03E         	call	_wait00	;wreg free
  1006                           
  1007                           ;sample.c: 63: PORTC=0x01;
  1008  007C0E  0E01               	movlw	1
  1009  007C10  6E82               	movwf	3970,c	;volatile
  1010                           
  1011                           ;sample.c: 64: wait00(4);
  1012  007C12  0E00               	movlw	0
  1013  007C14  6E02               	movwf	wait00@k+1,c
  1014  007C16  0E04               	movlw	4
  1015  007C18  6E01               	movwf	wait00@k,c
  1016  007C1A  EC7D  F03E         	call	_wait00	;wreg free
  1017                           
  1018                           ;sample.c: 65: PORTC=0x00;
  1019  007C1E  0E00               	movlw	0
  1020  007C20  6E82               	movwf	3970,c	;volatile
  1021                           
  1022                           ;sample.c: 66: wait00(8);
  1023  007C22  0E00               	movlw	0
  1024  007C24  6E02               	movwf	wait00@k+1,c
  1025  007C26  0E08               	movlw	8
  1026  007C28  6E01               	movwf	wait00@k,c
  1027  007C2A  EC7D  F03E         	call	_wait00	;wreg free
  1028  007C2E  0012               	return		;funcret
  1029  007C30                     __end_of_mini_right_down:
  1030                           	opt stack 0
  1031                           status	equ	0xFD8
  1032                           
  1033 ;; *************** function _mini_left_down *****************
  1034 ;; Defined at:
  1035 ;;		line 52 in file "sample.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;		None
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;		None
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  2   40[None  ] int 
  1042 ;; Registers used:
  1043 ;;		wreg, status,2, status,0, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1049 ;;      Params:         0       0       0       0       0       0       0       0       0
  1050 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1051 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1052 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1053 ;;Total ram usage:        0 bytes
  1054 ;; Hardware stack levels used:    1
  1055 ;; Hardware stack levels required when called:    1
  1056 ;; This function calls:
  1057 ;;		_wait00
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063                           	psect	text6
  1064  007BCC                     __ptext6:
  1065                           	opt stack 0
  1066  007BCC                     _mini_left_down:
  1067                           	opt stack 29
  1068                           
  1069                           ;sample.c: 53: PORTC=0x03;
  1070                           
  1071                           ;incstack = 0
  1072  007BCC  0E03               	movlw	3
  1073  007BCE  6E82               	movwf	3970,c	;volatile
  1074                           
  1075                           ;sample.c: 54: wait00(0.3);
  1076  007BD0  0E00               	movlw	0
  1077  007BD2  6E02               	movwf	wait00@k+1,c
  1078  007BD4  0E00               	movlw	0
  1079  007BD6  6E01               	movwf	wait00@k,c
  1080  007BD8  EC7D  F03E         	call	_wait00	;wreg free
  1081                           
  1082                           ;sample.c: 55: PORTC=0x02;
  1083  007BDC  0E02               	movlw	2
  1084  007BDE  6E82               	movwf	3970,c	;volatile
  1085                           
  1086                           ;sample.c: 56: wait00(4);
  1087  007BE0  0E00               	movlw	0
  1088  007BE2  6E02               	movwf	wait00@k+1,c
  1089  007BE4  0E04               	movlw	4
  1090  007BE6  6E01               	movwf	wait00@k,c
  1091  007BE8  EC7D  F03E         	call	_wait00	;wreg free
  1092                           
  1093                           ;sample.c: 57: PORTC=0x00;
  1094  007BEC  0E00               	movlw	0
  1095  007BEE  6E82               	movwf	3970,c	;volatile
  1096                           
  1097                           ;sample.c: 58: wait00(8);
  1098  007BF0  0E00               	movlw	0
  1099  007BF2  6E02               	movwf	wait00@k+1,c
  1100  007BF4  0E08               	movlw	8
  1101  007BF6  6E01               	movwf	wait00@k,c
  1102  007BF8  EC7D  F03E         	call	_wait00	;wreg free
  1103  007BFC  0012               	return		;funcret
  1104  007BFE                     __end_of_mini_left_down:
  1105                           	opt stack 0
  1106                           status	equ	0xFD8
  1107                           
  1108 ;; *************** function _left_down *****************
  1109 ;; Defined at:
  1110 ;;		line 17 in file "sample.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;		None
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  2   28[None  ] int 
  1117 ;; Registers used:
  1118 ;;		wreg, status,2, status,0, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1124 ;;      Params:         0       0       0       0       0       0       0       0       0
  1125 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1126 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1127 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1128 ;;Total ram usage:        0 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    1
  1131 ;; This function calls:
  1132 ;;		_wait00
  1133 ;; This function is called by:
  1134 ;;		_main
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text7
  1139  007B9A                     __ptext7:
  1140                           	opt stack 0
  1141  007B9A                     _left_down:
  1142                           	opt stack 29
  1143                           
  1144                           ;sample.c: 18: PORTC=0x03;
  1145                           
  1146                           ;incstack = 0
  1147  007B9A  0E03               	movlw	3
  1148  007B9C  6E82               	movwf	3970,c	;volatile
  1149                           
  1150                           ;sample.c: 19: wait00(0.3);
  1151  007B9E  0E00               	movlw	0
  1152  007BA0  6E02               	movwf	wait00@k+1,c
  1153  007BA2  0E00               	movlw	0
  1154  007BA4  6E01               	movwf	wait00@k,c
  1155  007BA6  EC7D  F03E         	call	_wait00	;wreg free
  1156                           
  1157                           ;sample.c: 20: PORTC=0x02;
  1158  007BAA  0E02               	movlw	2
  1159  007BAC  6E82               	movwf	3970,c	;volatile
  1160                           
  1161                           ;sample.c: 21: wait00(15);
  1162  007BAE  0E00               	movlw	0
  1163  007BB0  6E02               	movwf	wait00@k+1,c
  1164  007BB2  0E0F               	movlw	15
  1165  007BB4  6E01               	movwf	wait00@k,c
  1166  007BB6  EC7D  F03E         	call	_wait00	;wreg free
  1167                           
  1168                           ;sample.c: 22: PORTC=0x00;
  1169  007BBA  0E00               	movlw	0
  1170  007BBC  6E82               	movwf	3970,c	;volatile
  1171                           
  1172                           ;sample.c: 23: wait00(20);
  1173  007BBE  0E00               	movlw	0
  1174  007BC0  6E02               	movwf	wait00@k+1,c
  1175  007BC2  0E14               	movlw	20
  1176  007BC4  6E01               	movwf	wait00@k,c
  1177  007BC6  EC7D  F03E         	call	_wait00	;wreg free
  1178  007BCA  0012               	return		;funcret
  1179  007BCC                     __end_of_left_down:
  1180                           	opt stack 0
  1181                           status	equ	0xFD8
  1182                           
  1183 ;; *************** function _led_sens *****************
  1184 ;; Defined at:
  1185 ;;		line 81 in file "sample.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  2   52[None  ] int 
  1192 ;; Registers used:
  1193 ;;		None
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1199 ;;      Params:         0       0       0       0       0       0       0       0       0
  1200 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1202 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1203 ;;Total ram usage:        0 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; This function calls:
  1206 ;;		Nothing
  1207 ;; This function is called by:
  1208 ;;		_main
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           	psect	text8
  1213  007CC6                     __ptext8:
  1214                           	opt stack 0
  1215  007CC6                     _led_sens:
  1216                           	opt stack 30
  1217                           
  1218                           ;sample.c: 82: PORTAbits.RA0 = PORTBbits.RB0;
  1219                           
  1220                           ;incstack = 0
  1221  007CC6  A081               	btfss	3969,0,c	;volatile
  1222  007CC8  D002               	bra	u45
  1223  007CCA  8080               	bsf	3968,0,c	;volatile
  1224  007CCC  D001               	bra	u47
  1225  007CCE                     u45:
  1226  007CCE  9080               	bcf	3968,0,c	;volatile
  1227  007CD0                     u47:
  1228                           
  1229                           ;sample.c: 83: PORTAbits.RA1 = PORTBbits.RB1;
  1230  007CD0  A281               	btfss	3969,1,c	;volatile
  1231  007CD2  D002               	bra	u55
  1232  007CD4  8280               	bsf	3968,1,c	;volatile
  1233  007CD6  D001               	bra	u57
  1234  007CD8                     u55:
  1235  007CD8  9280               	bcf	3968,1,c	;volatile
  1236  007CDA                     u57:
  1237                           
  1238                           ;sample.c: 84: PORTAbits.RA2 = PORTBbits.RB2;
  1239  007CDA  A481               	btfss	3969,2,c	;volatile
  1240  007CDC  D002               	bra	u65
  1241  007CDE  8480               	bsf	3968,2,c	;volatile
  1242  007CE0  D001               	bra	u67
  1243  007CE2                     u65:
  1244  007CE2  9480               	bcf	3968,2,c	;volatile
  1245  007CE4                     u67:
  1246                           
  1247                           ;sample.c: 85: PORTAbits.RA3 = PORTBbits.RB3;
  1248  007CE4  A681               	btfss	3969,3,c	;volatile
  1249  007CE6  D002               	bra	u75
  1250  007CE8  8680               	bsf	3968,3,c	;volatile
  1251  007CEA  D001               	bra	u77
  1252  007CEC                     u75:
  1253  007CEC  9680               	bcf	3968,3,c	;volatile
  1254  007CEE                     u77:
  1255                           
  1256                           ;sample.c: 86: PORTAbits.RA4 = PORTBbits.RB4;
  1257  007CEE  A881               	btfss	3969,4,c	;volatile
  1258  007CF0  D002               	bra	u85
  1259  007CF2  8880               	bsf	3968,4,c	;volatile
  1260  007CF4  D001               	bra	u87
  1261  007CF6                     u85:
  1262  007CF6  9880               	bcf	3968,4,c	;volatile
  1263  007CF8                     u87:
  1264  007CF8  0012               	return		;funcret
  1265  007CFA                     __end_of_led_sens:
  1266                           	opt stack 0
  1267                           status	equ	0xFD8
  1268                           
  1269 ;; *************** function _fast_straight *****************
  1270 ;; Defined at:
  1271 ;;		line 74 in file "sample.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;		None
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  2   49[None  ] int 
  1278 ;; Registers used:
  1279 ;;		wreg, status,2, status,0, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1285 ;;      Params:         0       0       0       0       0       0       0       0       0
  1286 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1287 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1288 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1289 ;;Total ram usage:        0 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; Hardware stack levels required when called:    1
  1292 ;; This function calls:
  1293 ;;		_wait00
  1294 ;; This function is called by:
  1295 ;;		_main
  1296 ;; This function uses a non-reentrant model
  1297 ;;
  1298                           
  1299                           	psect	text9
  1300  007B56                     __ptext9:
  1301                           	opt stack 0
  1302  007B56                     _fast_straight:
  1303                           	opt stack 29
  1304                           
  1305                           ;sample.c: 75: PORTC=0x03;
  1306                           
  1307                           ;incstack = 0
  1308  007B56  0E03               	movlw	3
  1309  007B58  6E82               	movwf	3970,c	;volatile
  1310                           
  1311                           ;sample.c: 76: wait00(20);
  1312  007B5A  0E00               	movlw	0
  1313  007B5C  6E02               	movwf	wait00@k+1,c
  1314  007B5E  0E14               	movlw	20
  1315  007B60  6E01               	movwf	wait00@k,c
  1316  007B62  EC7D  F03E         	call	_wait00	;wreg free
  1317                           
  1318                           ;sample.c: 77: PORTC=0x00;
  1319  007B66  0E00               	movlw	0
  1320  007B68  6E82               	movwf	3970,c	;volatile
  1321                           
  1322                           ;sample.c: 78: wait00(5);
  1323  007B6A  0E00               	movlw	0
  1324  007B6C  6E02               	movwf	wait00@k+1,c
  1325  007B6E  0E05               	movlw	5
  1326  007B70  6E01               	movwf	wait00@k,c
  1327  007B72  EC7D  F03E         	call	_wait00	;wreg free
  1328  007B76  0012               	return		;funcret
  1329  007B78                     __end_of_fast_straight:
  1330                           	opt stack 0
  1331                           status	equ	0xFD8
  1332                           
  1333 ;; *************** function _wait00 *****************
  1334 ;; Defined at:
  1335 ;;		line 6 in file "sample.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;  k               2    0[COMRAM] short 
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;  i               2    5[COMRAM] short 
  1340 ;;  j               2    3[COMRAM] short 
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  2    0[COMRAM] int 
  1343 ;; Registers used:
  1344 ;;		wreg, status,2, status,0
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1350 ;;      Params:         2       0       0       0       0       0       0       0       0
  1351 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1352 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1353 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1354 ;;Total ram usage:        7 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; This function calls:
  1357 ;;		Nothing
  1358 ;; This function is called by:
  1359 ;;		_left_down
  1360 ;;		_small_left_down
  1361 ;;		_right_down
  1362 ;;		_small_right_down
  1363 ;;		_mini_left_down
  1364 ;;		_mini_right_down
  1365 ;;		_straight
  1366 ;;		_fast_straight
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text10
  1371  007CFA                     __ptext10:
  1372                           	opt stack 0
  1373  007CFA                     _wait00:
  1374                           	opt stack 29
  1375                           
  1376                           ;sample.c: 9: short i;
  1377                           ;sample.c: 10: short j;
  1378                           ;sample.c: 11: for(j=0;j<k;j++){
  1379                           
  1380                           ;incstack = 0
  1381  007CFA  0E00               	movlw	0
  1382  007CFC  6E05               	movwf	wait00@j+1,c
  1383  007CFE  0E00               	movlw	0
  1384  007D00  6E04               	movwf	wait00@j,c
  1385  007D02  D011               	goto	l21
  1386  007D04                     
  1387                           ;sample.c: 12: for(i=0;i<3000;i++){
  1388  007D04  0E00               	movlw	0
  1389  007D06  6E07               	movwf	wait00@i+1,c
  1390  007D08  0E00               	movlw	0
  1391  007D0A  6E06               	movwf	wait00@i,c
  1392  007D0C                     l1153:
  1393  007D0C  BE07               	btfsc	wait00@i+1,7,c
  1394  007D0E  D006               	goto	l23
  1395  007D10  0EB8               	movlw	184
  1396  007D12  5C06               	subwf	wait00@i,w,c
  1397  007D14  0E0B               	movlw	11
  1398  007D16  5807               	subwfb	wait00@i+1,w,c
  1399  007D18  B0D8               	btfsc	status,0,c
  1400  007D1A  D003               	goto	u1180
  1401  007D1C                     l23:
  1402  007D1C  4A06               	infsnz	wait00@i,f,c
  1403  007D1E  2A07               	incf	wait00@i+1,f,c
  1404  007D20  D7F5               	goto	l1153
  1405  007D22                     u1180:
  1406  007D22  4A04               	infsnz	wait00@j,f,c
  1407  007D24  2A05               	incf	wait00@j+1,f,c
  1408  007D26                     l21:
  1409  007D26  5001               	movf	wait00@k,w,c
  1410  007D28  5C04               	subwf	wait00@j,w,c
  1411  007D2A  5005               	movf	wait00@j+1,w,c
  1412  007D2C  0A80               	xorlw	128
  1413  007D2E  6E03               	movwf	??_wait00& (0+255),c
  1414  007D30  5002               	movf	wait00@k+1,w,c
  1415  007D32  0A80               	xorlw	128
  1416  007D34  5803               	subwfb	??_wait00& (0+255),w,c
  1417  007D36  B0D8               	btfsc	status,0,c
  1418  007D38  0012               	return	
  1419  007D3A  D7E4               	goto	l22
  1420  007D3C                     __end_of_wait00:
  1421                           	opt stack 0
  1422  0000                     status	equ	0xFD8
  1423                           status	equ	0xFD8
  1424                           
  1425                           	psect	rparam
  1426  0000                     status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      17
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _straight->_wait00
    _small_right_down->_wait00
    _small_left_down->_wait00
    _right_down->_wait00
    _mini_right_down->_wait00
    _mini_left_down->_wait00
    _left_down->_wait00
    _fast_straight->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   14837
                                              7 COMRAM    10    10      0
                      _fast_straight
                           _led_sens
                          _left_down
                     _mini_left_down
                    _mini_right_down
                         _right_down
                    _small_left_down
                   _small_right_down
                           _straight
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _small_right_down                                     0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _small_left_down                                      0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _right_down                                           0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _mini_right_down                                      0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _mini_left_down                                       0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _left_down                                            0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fast_straight                                        0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2    1764
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fast_straight
     _wait00
   _led_sens
   _left_down
     _wait00
   _mini_left_down
     _wait00
   _mini_right_down
     _wait00
   _right_down
     _wait00
   _small_left_down
     _wait00
   _small_right_down
     _wait00
   _straight
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     11      11       1       17.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 01 14:25:20 2018

                       l21 7D26                         l22 7D04                         l23 7D1C  
                       l70 7E06                         l62 7DA0                         l71 7E00  
                       l80 7E66                         l64 7DC4                         l65 7DBE  
                       l90 7EE4                         l82 7E84                         l74 7E1C  
                       l58 7D78                         l59 7D74                         l92 7F08  
                       l84 7EA2                         l76 7E32                         l68 7DE2  
                       l93 7F02                         l86 7EC6                         l78 7E48  
                       l87 7EC0                         l96 7F1E                         l98 7F34  
                       u45 7CCE                         u55 7CD8                         u47 7CD0  
                       u65 7CE2                         u57 7CDA                         u75 7CEC  
                       u67 7CE4                         u85 7CF6                         u77 7CEE  
                       u87 7CF8                        l100 7F4A                        l102 7F68  
                      l111 7FC2                        l104 7F86                        l113 7FDE  
                      l106 7FFA                       l1153 7D0C                       l1501 7F5E  
                     l1263 7D96                       l1515 7F7C                       l1541 7FC2  
                     l1381 7E7A                       l1367 7E5C                       l1547 7FDE  
                     l1397 7E9A                       u1200 7D7C                       u1180 7D22  
                     u2240 7FA6                       u2190 7F96                       u2271 7FEA  
                     _main 7D3C            ??_fast_straight 0008                       start 2000  
             ___param_bank 000000                      ?_main 0001                      _PORTA 000F80  
                    _PORTB 000F81                      _PORTC 000F82                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94  __size_of_small_right_down 0032  
          _small_left_down 7C62                      status 000FD8            __initialization 7B50  
             __end_of_main 8000                     ??_main 0008              __activetblptr 000000  
                   _ADCON1 000FC1           ??_mini_left_down 0008           __end_of_led_sens 7CFA  
                   _wait00 7CFA    __end_of_small_left_down 7C94           __end_of_straight 7B9A  
               __accesstop 0060    __end_of__initialization 7B50              ___rparam_used 000001  
 __size_of_mini_right_down 0032             __pcstackCOMRAM 0001           _small_right_down 7C94  
       __size_of_left_down 0032                    ?_wait00 0001           ?_small_left_down 0001  
                ?_led_sens 0001      __end_of_fast_straight 7B78                    __Hparam 0000  
                  __Lparam 0000                  ?_straight 0001                    __pcinit 7B50  
                  __ramtop 0800            __size_of_wait00 0042          __end_of_left_down 7BCC  
                  __ptext0 7D3C                    __ptext1 7B78                    __ptext2 7C94  
                  __ptext3 7C62                    __ptext4 7C30                    __ptext5 7BFE  
                  __ptext6 7BCC                    __ptext7 7B9A                    __ptext8 7CC6  
                  __ptext9 7B56          ??_mini_right_down 0008                    main@map 000C  
     end_of_initialization 7B50                 ??_led_sens 0001                    wait00@i 0006  
                  wait00@j 0004                    wait00@k 0001                 _right_down 7C30  
               ??_straight 0008                  _PORTAbits 000F80                  _PORTBbits 000F81  
               main@strght 0008   __end_of_small_right_down 7CC6             __end_of_wait00 7D3C  
      start_initialization 7B50                ?_right_down 0001    __size_of_mini_left_down 0032  
                 ??_wait00 0003          __size_of_led_sens 0034            _mini_right_down 7BFE  
        __size_of_straight 0022                  _left_down 7B9A        __size_of_right_down 0032  
 __size_of_small_left_down 0032                  main@right 000E                 ?_left_down 0001  
   __size_of_fast_straight 0022    __end_of_mini_right_down 7C30                   __Hrparam 0000  
           _mini_left_down 7BCC                   __Lrparam 0000          ?_small_right_down 0001  
       ??_small_right_down 0008                   __ptext10 7CFA                   _led_sens 7CC6  
            __size_of_main 02C4     __end_of_mini_left_down 7BFE               ??_right_down 0008  
            _fast_straight 7B56          ??_small_left_down 0008                   main@left 0010  
                 main@last 000A                   _straight 7B78                ??_left_down 0008  
       __end_of_right_down 7C62           ?_mini_right_down 0001            ?_mini_left_down 0001  
           ?_fast_straight 0001  
