

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 28 20:37:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F2553 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _PORTB	set	3969
    56  0000                     _PORTA	set	3968
    57  0000                     _TRISC	set	3988
    58  0000                     _TRISB	set	3987
    59  0000                     _TRISA	set	3986
    60  0000                     _ADCON1	set	4033
    61  0000                     _PORTBbits	set	3969
    62  0000                     _PORTAbits	set	3968
    63  0000                     _PORTC	set	3970
    64                           
    65                           ; #config settings
    66                           
    67                           	psect	cinit
    68  007B10                     __pcinit:
    69                           	opt stack 0
    70  007B10                     start_initialization:
    71                           	opt stack 0
    72  007B10                     __initialization:
    73                           	opt stack 0
    74  007B10                     end_of_initialization:
    75                           	opt stack 0
    76  007B10                     __end_of__initialization:
    77                           	opt stack 0
    78  007B10  0100               	movlb	0
    79  007B12  EF7E  F03E         	goto	_main	;jump to C main() function
    80                           
    81                           	psect	cstackCOMRAM
    82  000001                     __pcstackCOMRAM:
    83                           	opt stack 0
    84  000001                     wait00@k:
    85                           	opt stack 0
    86                           
    87                           ; 2 bytes @ 0x0
    88  000001                     	ds	2
    89  000003                     ??_wait00:
    90                           
    91                           ; 1 bytes @ 0x2
    92  000003                     	ds	1
    93  000004                     wait00@j:
    94                           	opt stack 0
    95                           
    96                           ; 2 bytes @ 0x3
    97  000004                     	ds	2
    98  000006                     wait00@i:
    99                           	opt stack 0
   100                           
   101                           ; 2 bytes @ 0x5
   102  000006                     	ds	2
   103  000008                     main@strght:
   104                           	opt stack 0
   105                           
   106                           ; 2 bytes @ 0x7
   107  000008                     	ds	2
   108  00000A                     main@flag:
   109                           	opt stack 0
   110                           
   111                           ; 2 bytes @ 0x9
   112  00000A                     	ds	2
   113  00000C                     main@last:
   114                           	opt stack 0
   115                           
   116                           ; 2 bytes @ 0xB
   117  00000C                     	ds	2
   118  00000E                     main@right:
   119                           	opt stack 0
   120                           
   121                           ; 2 bytes @ 0xD
   122  00000E                     	ds	2
   123  000010                     main@left:
   124                           	opt stack 0
   125                           
   126                           ; 2 bytes @ 0xF
   127  000010                     	ds	2
   128                           
   129 ;;
   130 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   131 ;;
   132 ;; *************** function _main *****************
   133 ;; Defined at:
   134 ;;		line 87 in file "sample.c"
   135 ;; Parameters:    Size  Location     Type
   136 ;;		None
   137 ;; Auto vars:     Size  Location     Type
   138 ;;  left            2   15[COMRAM] int 
   139 ;;  right           2   13[COMRAM] int 
   140 ;;  last            2   11[COMRAM] int 
   141 ;;  flag            2    9[COMRAM] int 
   142 ;;  strght          2    7[COMRAM] int 
   143 ;; Return value:  Size  Location     Type
   144 ;;                  2   57[None  ] int 
   145 ;; Registers used:
   146 ;;		wreg, status,2, status,0, cstack
   147 ;; Tracked objects:
   148 ;;		On entry : 0/0
   149 ;;		On exit  : 0/0
   150 ;;		Unchanged: 0/0
   151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   152 ;;      Params:         0       0       0       0       0       0       0       0       0
   153 ;;      Locals:        10       0       0       0       0       0       0       0       0
   154 ;;      Temps:          0       0       0       0       0       0       0       0       0
   155 ;;      Totals:        10       0       0       0       0       0       0       0       0
   156 ;;Total ram usage:       10 bytes
   157 ;; Hardware stack levels required when called:    2
   158 ;; This function calls:
   159 ;;		_fast_straight
   160 ;;		_led_sens
   161 ;;		_left_down
   162 ;;		_mini_left_down
   163 ;;		_mini_right_down
   164 ;;		_right_down
   165 ;;		_small_left_down
   166 ;;		_small_right_down
   167 ;;		_straight
   168 ;; This function is called by:
   169 ;;		Startup code after reset
   170 ;; This function uses a non-reentrant model
   171 ;;
   172                           
   173                           	psect	text0
   174  007CFC                     __ptext0:
   175                           	opt stack 0
   176  007CFC                     _main:
   177                           	opt stack 29
   178                           
   179                           ;sample.c: 89: int last,right=1,left=0,strght=2,flag=2;
   180                           
   181                           ;incstack = 0
   182  007CFC  0E00               	movlw	0
   183  007CFE  6E0F               	movwf	main@right+1,c
   184  007D00  0E01               	movlw	1
   185  007D02  6E0E               	movwf	main@right,c
   186  007D04  0E00               	movlw	0
   187  007D06  6E11               	movwf	main@left+1,c
   188  007D08  0E00               	movlw	0
   189  007D0A  6E10               	movwf	main@left,c
   190  007D0C  0E00               	movlw	0
   191  007D0E  6E09               	movwf	main@strght+1,c
   192  007D10  0E02               	movlw	2
   193  007D12  6E08               	movwf	main@strght,c
   194  007D14  0E00               	movlw	0
   195  007D16  6E0B               	movwf	main@flag+1,c
   196  007D18  0E02               	movlw	2
   197  007D1A  6E0A               	movwf	main@flag,c
   198                           
   199                           ;sample.c: 91: ADCON1 = 0x0F;
   200  007D1C  0E0F               	movlw	15
   201  007D1E  6EC1               	movwf	4033,c	;volatile
   202                           
   203                           ;sample.c: 95: TRISA = 0x20;
   204  007D20  0E20               	movlw	32
   205  007D22  6E92               	movwf	3986,c	;volatile
   206                           
   207                           ;sample.c: 96: TRISB = 0xFF;
   208  007D24  6893               	setf	3987,c	;volatile
   209                           
   210                           ;sample.c: 97: TRISC = 0x00;
   211  007D26  0E00               	movlw	0
   212  007D28  6E94               	movwf	3988,c	;volatile
   213                           
   214                           ;sample.c: 100: PORTA = 0x00;
   215  007D2A  0E00               	movlw	0
   216  007D2C  6E80               	movwf	3968,c	;volatile
   217                           
   218                           ;sample.c: 101: PORTB = 0x00;
   219  007D2E  0E00               	movlw	0
   220  007D30  6E81               	movwf	3969,c	;volatile
   221                           
   222                           ;sample.c: 102: PORTC = 0x00;
   223  007D32  0E00               	movlw	0
   224  007D34  6E82               	movwf	3970,c	;volatile
   225                           
   226                           ;sample.c: 105: while(PORTAbits.RA5==1){
   227  007D36  D002               	goto	l58
   228  007D38                     
   229                           ;sample.c: 106: led_sens();
   230  007D38  EC43  F03E         	call	_led_sens	;wreg free
   231  007D3C                     l58:
   232  007D3C  BA80               	btfsc	3968,5,c	;volatile
   233  007D3E  D7FC               	goto	l59
   234  007D40                     u1230:
   235                           
   236                           ;sample.c: 111: led_sens();
   237                           
   238                           ;sample.c: 107: }
   239                           ;sample.c: 110: while(1){
   240  007D40  EC43  F03E         	call	_led_sens	;wreg free
   241                           
   242                           ;sample.c: 114: if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORTBbits
      +                          .RB3==1 && PORTBbits.RB4==0){
   243  007D44  B081               	btfsc	3969,0,c	;volatile
   244  007D46  A281               	btfss	3969,1,c	;volatile
   245  007D48  D00D               	goto	l62
   246  007D4A  B481               	btfsc	3969,2,c	;volatile
   247  007D4C  A681               	btfss	3969,3,c	;volatile
   248  007D4E  D00A               	goto	l62
   249  007D50  B881               	btfsc	3969,4,c	;volatile
   250  007D52  D008               	goto	l62
   251                           
   252                           ;sample.c: 116: right_down();
   253  007D54  ECF8  F03D         	call	_right_down	;wreg free
   254  007D58  D063               	goto	l1384
   255  007D5A                     l1280:
   256                           
   257                           ;sample.c: 118: flag=1;
   258  007D5A  0E00               	movlw	0
   259  007D5C  6E0B               	movwf	main@flag+1,c
   260  007D5E  0E01               	movlw	1
   261  007D60                     L1:
   262  007D60  6E0A               	movwf	main@flag,c
   263                           
   264                           ;sample.c: 120: }
   265  007D62  D7EE               	goto	u1230
   266  007D64                     l62:
   267                           
   268                           ;sample.c: 121: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0){
   269  007D64  B081               	btfsc	3969,0,c	;volatile
   270  007D66  A281               	btfss	3969,1,c	;volatile
   271  007D68  D00F               	goto	l64
   272  007D6A  B481               	btfsc	3969,2,c	;volatile
   273  007D6C  B681               	btfsc	3969,3,c	;volatile
   274  007D6E  D00C               	goto	l64
   275  007D70  B881               	btfsc	3969,4,c	;volatile
   276  007D72  D00A               	goto	l64
   277                           
   278                           ;sample.c: 123: if(flag==0)
   279  007D74  500A               	movf	main@flag,w,c
   280  007D76  100B               	iorwf	main@flag+1,w,c
   281  007D78  A4D8               	btfss	status,2,c
   282  007D7A  D003               	goto	l65
   283                           
   284                           ;sample.c: 124: small_left_down();
   285  007D7C  EC11  F03E         	call	_small_left_down	;wreg free
   286  007D80  D7DF               	goto	u1230
   287  007D82                     l65:
   288                           
   289                           ;sample.c: 125: else{
   290                           ;sample.c: 126: small_right_down();
   291  007D82  EC2A  F03E         	call	_small_right_down	;wreg free
   292  007D86  D04C               	goto	l1384
   293  007D88                     l64:
   294                           
   295                           ;sample.c: 131: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1){
   296  007D88  B081               	btfsc	3969,0,c	;volatile
   297  007D8A  A281               	btfss	3969,1,c	;volatile
   298  007D8C  D00C               	goto	l68
   299  007D8E  A481               	btfss	3969,2,c	;volatile
   300  007D90  A681               	btfss	3969,3,c	;volatile
   301  007D92  D009               	goto	l68
   302  007D94  A881               	btfss	3969,4,c	;volatile
   303  007D96  D007               	goto	l68
   304                           
   305                           ;sample.c: 133: fast_straight();
   306  007D98  EC8B  F03D         	call	_fast_straight	;wreg free
   307                           
   308                           ;sample.c: 134: last=strght;
   309  007D9C  C008  F00C         	movff	main@strght,main@last
   310  007DA0  C009  F00D         	movff	main@strght+1,main@last+1
   311  007DA4  D7DA               	goto	l1280
   312  007DA6                     l68:
   313                           
   314                           ;sample.c: 138: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1){
   315  007DA6  A081               	btfss	3969,0,c	;volatile
   316  007DA8  B281               	btfsc	3969,1,c	;volatile
   317  007DAA  D00F               	goto	l70
   318  007DAC  B481               	btfsc	3969,2,c	;volatile
   319  007DAE  A681               	btfss	3969,3,c	;volatile
   320  007DB0  D00C               	goto	l70
   321  007DB2  A881               	btfss	3969,4,c	;volatile
   322  007DB4  D00A               	goto	l70
   323                           
   324                           ;sample.c: 140: if(flag==0)
   325  007DB6  500A               	movf	main@flag,w,c
   326  007DB8  100B               	iorwf	main@flag+1,w,c
   327  007DBA  A4D8               	btfss	status,2,c
   328  007DBC  D003               	goto	l71
   329                           
   330                           ;sample.c: 141: small_right_down();
   331  007DBE  EC2A  F03E         	call	_small_right_down	;wreg free
   332  007DC2  D7BE               	goto	u1230
   333  007DC4                     l71:
   334                           
   335                           ;sample.c: 142: else{
   336                           ;sample.c: 143: small_left_down();
   337  007DC4  EC11  F03E         	call	_small_left_down	;wreg free
   338  007DC8  D03A               	goto	l1398
   339  007DCA                     l70:
   340                           
   341                           ;sample.c: 148: else if(PORTBbits.RB0==0 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1){
   342  007DCA  A081               	btfss	3969,0,c	;volatile
   343  007DCC  A281               	btfss	3969,1,c	;volatile
   344  007DCE  D008               	goto	l74
   345  007DD0  B481               	btfsc	3969,2,c	;volatile
   346  007DD2  A681               	btfss	3969,3,c	;volatile
   347  007DD4  D005               	goto	l74
   348  007DD6  A881               	btfss	3969,4,c	;volatile
   349  007DD8  D003               	goto	l74
   350                           
   351                           ;sample.c: 150: left_down();
   352  007DDA  ECAD  F03D         	call	_left_down	;wreg free
   353  007DDE  D02F               	goto	l1398
   354  007DE0                     l74:
   355                           
   356                           ;sample.c: 155: else if(PORTBbits.RB0==1 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1) {mini_left_down();last=left;flag=1;}
   357  007DE0  B081               	btfsc	3969,0,c	;volatile
   358  007DE2  B281               	btfsc	3969,1,c	;volatile
   359  007DE4  D008               	goto	l76
   360  007DE6  A481               	btfss	3969,2,c	;volatile
   361  007DE8  A681               	btfss	3969,3,c	;volatile
   362  007DEA  D005               	goto	l76
   363  007DEC  A881               	btfss	3969,4,c	;volatile
   364  007DEE  D003               	goto	l76
   365  007DF0  ECC6  F03D         	call	_mini_left_down	;wreg free
   366  007DF4  D024               	goto	l1398
   367  007DF6                     l76:
   368                           
   369                           ;sample.c: 156: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==1) {mini_right_down();last=right; flag=1;}
   370  007DF6  B081               	btfsc	3969,0,c	;volatile
   371  007DF8  A281               	btfss	3969,1,c	;volatile
   372  007DFA  D008               	goto	l78
   373  007DFC  A481               	btfss	3969,2,c	;volatile
   374  007DFE  B681               	btfsc	3969,3,c	;volatile
   375  007E00  D005               	goto	l78
   376  007E02  A881               	btfss	3969,4,c	;volatile
   377  007E04  D003               	goto	l78
   378  007E06  ECDF  F03D         	call	_mini_right_down	;wreg free
   379  007E0A  D00A               	goto	l1384
   380  007E0C                     l78:
   381                           
   382                           ;sample.c: 157: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==1) {mini_right_down();last=right; flag=1;}
   383  007E0C  B081               	btfsc	3969,0,c	;volatile
   384  007E0E  A281               	btfss	3969,1,c	;volatile
   385  007E10  D00C               	goto	l80
   386  007E12  B481               	btfsc	3969,2,c	;volatile
   387  007E14  B681               	btfsc	3969,3,c	;volatile
   388  007E16  D009               	goto	l80
   389  007E18  A881               	btfss	3969,4,c	;volatile
   390  007E1A  D007               	goto	l80
   391  007E1C  ECDF  F03D         	call	_mini_right_down	;wreg free
   392  007E20                     l1384:
   393  007E20  C00E  F00C         	movff	main@right,main@last
   394  007E24  C00F  F00D         	movff	main@right+1,main@last+1
   395  007E28  D798               	goto	l1280
   396  007E2A                     l80:
   397                           
   398                           ;sample.c: 158: else if(PORTBbits.RB0==1 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1) {mini_left_down();last=left;flag=1;}
   399  007E2A  B081               	btfsc	3969,0,c	;volatile
   400  007E2C  B281               	btfsc	3969,1,c	;volatile
   401  007E2E  D00C               	goto	l82
   402  007E30  B481               	btfsc	3969,2,c	;volatile
   403  007E32  A681               	btfss	3969,3,c	;volatile
   404  007E34  D009               	goto	l82
   405  007E36  A881               	btfss	3969,4,c	;volatile
   406  007E38  D007               	goto	l82
   407  007E3A  ECC6  F03D         	call	_mini_left_down	;wreg free
   408  007E3E                     l1398:
   409  007E3E  C010  F00C         	movff	main@left,main@last
   410  007E42  C011  F00D         	movff	main@left+1,main@last+1
   411  007E46  D789               	goto	l1280
   412  007E48                     l82:
   413                           
   414                           ;sample.c: 161: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==1){
   415  007E48  A081               	btfss	3969,0,c	;volatile
   416  007E4A  B281               	btfsc	3969,1,c	;volatile
   417  007E4C  D00C               	goto	l84
   418  007E4E  A481               	btfss	3969,2,c	;volatile
   419  007E50  B681               	btfsc	3969,3,c	;volatile
   420  007E52  D009               	goto	l84
   421  007E54  A881               	btfss	3969,4,c	;volatile
   422  007E56  D007               	goto	l84
   423                           
   424                           ;sample.c: 163: right_down();
   425  007E58  ECF8  F03D         	call	_right_down	;wreg free
   426  007E5C  D071               	goto	l1532
   427  007E5E                     l1414:
   428                           
   429                           ;sample.c: 165: flag=0;
   430  007E5E  0E00               	movlw	0
   431  007E60  6E0B               	movwf	main@flag+1,c
   432  007E62  0E00               	movlw	0
   433  007E64  D77D               	goto	L1
   434  007E66                     l84:
   435                           
   436                           ;sample.c: 168: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1){
   437  007E66  A081               	btfss	3969,0,c	;volatile
   438  007E68  B281               	btfsc	3969,1,c	;volatile
   439  007E6A  D00F               	goto	l86
   440  007E6C  A481               	btfss	3969,2,c	;volatile
   441  007E6E  A681               	btfss	3969,3,c	;volatile
   442  007E70  D00C               	goto	l86
   443  007E72  A881               	btfss	3969,4,c	;volatile
   444  007E74  D00A               	goto	l86
   445                           
   446                           ;sample.c: 170: if(flag==1)
   447  007E76  040A               	decf	main@flag,w,c
   448  007E78  100B               	iorwf	main@flag+1,w,c
   449  007E7A  A4D8               	btfss	status,2,c
   450  007E7C  D003               	goto	l87
   451                           
   452                           ;sample.c: 171: small_left_down();
   453  007E7E  EC11  F03E         	call	_small_left_down	;wreg free
   454  007E82  D75E               	goto	u1230
   455  007E84                     l87:
   456                           
   457                           ;sample.c: 172: else{
   458                           ;sample.c: 173: small_right_down();
   459  007E84  EC2A  F03E         	call	_small_right_down	;wreg free
   460  007E88  D05B               	goto	l1532
   461  007E8A                     l86:
   462                           
   463                           ;sample.c: 178: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0){
   464  007E8A  A081               	btfss	3969,0,c	;volatile
   465  007E8C  B281               	btfsc	3969,1,c	;volatile
   466  007E8E  D00C               	goto	l90
   467  007E90  B481               	btfsc	3969,2,c	;volatile
   468  007E92  B681               	btfsc	3969,3,c	;volatile
   469  007E94  D009               	goto	l90
   470  007E96  B881               	btfsc	3969,4,c	;volatile
   471  007E98  D007               	goto	l90
   472                           
   473                           ;sample.c: 180: fast_straight(); last=strght;flag=0;}
   474  007E9A  EC8B  F03D         	call	_fast_straight	;wreg free
   475  007E9E  C008  F00C         	movff	main@strght,main@last
   476  007EA2  C009  F00D         	movff	main@strght+1,main@last+1
   477  007EA6  D7DB               	goto	l1414
   478  007EA8                     l90:
   479                           
   480                           ;sample.c: 182: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0){
   481  007EA8  B081               	btfsc	3969,0,c	;volatile
   482  007EAA  A281               	btfss	3969,1,c	;volatile
   483  007EAC  D00F               	goto	l92
   484  007EAE  A481               	btfss	3969,2,c	;volatile
   485  007EB0  B681               	btfsc	3969,3,c	;volatile
   486  007EB2  D00C               	goto	l92
   487  007EB4  B881               	btfsc	3969,4,c	;volatile
   488  007EB6  D00A               	goto	l92
   489                           
   490                           ;sample.c: 184: if(flag==1)
   491  007EB8  040A               	decf	main@flag,w,c
   492  007EBA  100B               	iorwf	main@flag+1,w,c
   493  007EBC  A4D8               	btfss	status,2,c
   494  007EBE  D003               	goto	l93
   495                           
   496                           ;sample.c: 185: small_right_down();
   497  007EC0  EC2A  F03E         	call	_small_right_down	;wreg free
   498  007EC4  D73D               	goto	u1230
   499  007EC6                     l93:
   500                           
   501                           ;sample.c: 186: else{
   502                           ;sample.c: 187: small_left_down();
   503  007EC6  EC11  F03E         	call	_small_left_down	;wreg free
   504  007ECA  D02B               	goto	l1518
   505  007ECC                     l92:
   506                           
   507                           ;sample.c: 192: else if(PORTBbits.RB0==1 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0){
   508  007ECC  B081               	btfsc	3969,0,c	;volatile
   509  007ECE  B281               	btfsc	3969,1,c	;volatile
   510  007ED0  D008               	goto	l96
   511  007ED2  A481               	btfss	3969,2,c	;volatile
   512  007ED4  B681               	btfsc	3969,3,c	;volatile
   513  007ED6  D005               	goto	l96
   514  007ED8  B881               	btfsc	3969,4,c	;volatile
   515  007EDA  D003               	goto	l96
   516                           
   517                           ;sample.c: 194: left_down();
   518  007EDC  ECAD  F03D         	call	_left_down	;wreg free
   519  007EE0  D020               	goto	l1518
   520  007EE2                     l96:
   521                           
   522                           ;sample.c: 199: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==0) {mini_right_down();last=right;flag=0;}
   523  007EE2  A081               	btfss	3969,0,c	;volatile
   524  007EE4  B281               	btfsc	3969,1,c	;volatile
   525  007EE6  D008               	goto	l98
   526  007EE8  B481               	btfsc	3969,2,c	;volatile
   527  007EEA  A681               	btfss	3969,3,c	;volatile
   528  007EEC  D005               	goto	l98
   529  007EEE  B881               	btfsc	3969,4,c	;volatile
   530  007EF0  D003               	goto	l98
   531  007EF2  ECDF  F03D         	call	_mini_right_down	;wreg free
   532  007EF6  D024               	goto	l1532
   533  007EF8                     l98:
   534                           
   535                           ;sample.c: 200: else if(PORTBbits.RB0==0 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0) {mini_left_down();last=left;flag=0;}
   536  007EF8  A081               	btfss	3969,0,c	;volatile
   537  007EFA  A281               	btfss	3969,1,c	;volatile
   538  007EFC  D008               	goto	l100
   539  007EFE  B481               	btfsc	3969,2,c	;volatile
   540  007F00  B681               	btfsc	3969,3,c	;volatile
   541  007F02  D005               	goto	l100
   542  007F04  B881               	btfsc	3969,4,c	;volatile
   543  007F06  D003               	goto	l100
   544  007F08  ECC6  F03D         	call	_mini_left_down	;wreg free
   545  007F0C  D00A               	goto	l1518
   546  007F0E                     l100:
   547                           
   548                           ;sample.c: 201: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==0) {mini_right_down();last=left;flag=0;}
   549  007F0E  A081               	btfss	3969,0,c	;volatile
   550  007F10  B281               	btfsc	3969,1,c	;volatile
   551  007F12  D00C               	goto	l102
   552  007F14  A481               	btfss	3969,2,c	;volatile
   553  007F16  A681               	btfss	3969,3,c	;volatile
   554  007F18  D009               	goto	l102
   555  007F1A  B881               	btfsc	3969,4,c	;volatile
   556  007F1C  D007               	goto	l102
   557  007F1E  ECDF  F03D         	call	_mini_right_down	;wreg free
   558  007F22                     l1518:
   559  007F22  C010  F00C         	movff	main@left,main@last
   560  007F26  C011  F00D         	movff	main@left+1,main@last+1
   561  007F2A  D799               	goto	l1414
   562  007F2C                     l102:
   563                           
   564                           ;sample.c: 202: else if(PORTBbits.RB0==0 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0) {mini_left_down();last=right;flag=0;}
   565  007F2C  A081               	btfss	3969,0,c	;volatile
   566  007F2E  A281               	btfss	3969,1,c	;volatile
   567  007F30  D00C               	goto	l104
   568  007F32  A481               	btfss	3969,2,c	;volatile
   569  007F34  B681               	btfsc	3969,3,c	;volatile
   570  007F36  D009               	goto	l104
   571  007F38  B881               	btfsc	3969,4,c	;volatile
   572  007F3A  D007               	goto	l104
   573  007F3C  ECC6  F03D         	call	_mini_left_down	;wreg free
   574  007F40                     l1532:
   575  007F40  C00E  F00C         	movff	main@right,main@last
   576  007F44  C00F  F00D         	movff	main@right+1,main@last+1
   577  007F48  D78A               	goto	l1414
   578  007F4A                     l104:
   579                           
   580                           ;sample.c: 205: else if(PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && PORT
      +                          Bbits.RB3==0 && PORTBbits.RB4==0){
   581  007F4A  A081               	btfss	3969,0,c	;volatile
   582  007F4C  B281               	btfsc	3969,1,c	;volatile
   583  007F4E  D023               	goto	l106
   584  007F50  A481               	btfss	3969,2,c	;volatile
   585  007F52  B681               	btfsc	3969,3,c	;volatile
   586  007F54  D020               	goto	l106
   587  007F56  B881               	btfsc	3969,4,c	;volatile
   588  007F58  D01E               	goto	l106
   589                           
   590                           ;sample.c: 206: if(last==right)
   591  007F5A  500E               	movf	main@right,w,c
   592  007F5C  180C               	xorwf	main@last,w,c
   593  007F5E  E107               	bnz	l1550
   594  007F60  500F               	movf	main@right+1,w,c
   595  007F62  180D               	xorwf	main@last+1,w,c
   596  007F64  A4D8               	btfss	status,2,c
   597  007F66  D003               	goto	l107
   598                           
   599                           ;sample.c: 207: {right_down();
   600  007F68  ECF8  F03D         	call	_right_down	;wreg free
   601  007F6C  D025               	goto	l1574
   602  007F6E                     l107:
   603  007F6E                     l1550:
   604                           
   605                           ;sample.c: 209: else if(last==left)
   606  007F6E  5010               	movf	main@left,w,c
   607  007F70  180C               	xorwf	main@last,w,c
   608  007F72  E107               	bnz	l1556
   609  007F74  5011               	movf	main@left+1,w,c
   610  007F76  180D               	xorwf	main@last+1,w,c
   611  007F78  A4D8               	btfss	status,2,c
   612  007F7A  D003               	goto	l109
   613                           
   614                           ;sample.c: 210: {left_down();
   615  007F7C  ECAD  F03D         	call	_left_down	;wreg free
   616  007F80  D029               	goto	l1580
   617  007F82                     l109:
   618  007F82                     l1556:
   619                           
   620                           ;sample.c: 212: else if(last==strght)
   621  007F82  5008               	movf	main@strght,w,c
   622  007F84  180C               	xorwf	main@last,w,c
   623  007F86  E103               	bnz	u2251
   624  007F88  5009               	movf	main@strght+1,w,c
   625  007F8A  180D               	xorwf	main@last+1,w,c
   626  007F8C  A4D8               	btfss	status,2,c
   627  007F8E                     u2251:
   628  007F8E  D6D8               	goto	u1230
   629                           
   630                           ;sample.c: 213: {straight();
   631  007F90  EC9C  F03D         	call	_straight	;wreg free
   632  007F94  D02D               	goto	l1586
   633  007F96                     l106:
   634                           
   635                           ;sample.c: 216: else if(PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORT
      +                          Bbits.RB3==1 && PORTBbits.RB4==1){
   636  007F96  B081               	btfsc	3969,0,c	;volatile
   637  007F98  A281               	btfss	3969,1,c	;volatile
   638  007F9A  D02F               	goto	l113
   639  007F9C  B481               	btfsc	3969,2,c	;volatile
   640  007F9E  A681               	btfss	3969,3,c	;volatile
   641  007FA0  D02C               	goto	l113
   642  007FA2  A881               	btfss	3969,4,c	;volatile
   643  007FA4  D02A               	goto	l113
   644                           
   645                           ;sample.c: 217: if(last==right)
   646  007FA6  500E               	movf	main@right,w,c
   647  007FA8  180C               	xorwf	main@last,w,c
   648  007FAA  E10B               	bnz	l1576
   649  007FAC  500F               	movf	main@right+1,w,c
   650  007FAE  180D               	xorwf	main@last+1,w,c
   651  007FB0  A4D8               	btfss	status,2,c
   652  007FB2  D007               	goto	l114
   653                           
   654                           ;sample.c: 218: {right_down();
   655  007FB4  ECF8  F03D         	call	_right_down	;wreg free
   656  007FB8                     l1574:
   657                           
   658                           ;sample.c: 219: last=right;}
   659  007FB8  C00E  F00C         	movff	main@right,main@last
   660  007FBC  C00F  F00D         	movff	main@right+1,main@last+1
   661  007FC0  D6BF               	goto	u1230
   662  007FC2                     l114:
   663  007FC2                     l1576:
   664                           
   665                           ;sample.c: 220: else if(last==left)
   666  007FC2  5010               	movf	main@left,w,c
   667  007FC4  180C               	xorwf	main@last,w,c
   668  007FC6  E10B               	bnz	l1582
   669  007FC8  5011               	movf	main@left+1,w,c
   670  007FCA  180D               	xorwf	main@last+1,w,c
   671  007FCC  A4D8               	btfss	status,2,c
   672  007FCE  D007               	goto	l116
   673                           
   674                           ;sample.c: 221: {left_down();
   675  007FD0  ECAD  F03D         	call	_left_down	;wreg free
   676  007FD4                     l1580:
   677                           
   678                           ;sample.c: 222: last=left;}
   679  007FD4  C010  F00C         	movff	main@left,main@last
   680  007FD8  C011  F00D         	movff	main@left+1,main@last+1
   681  007FDC  D6B1               	goto	u1230
   682  007FDE                     l116:
   683  007FDE                     l1582:
   684                           
   685                           ;sample.c: 223: else if(last==strght)
   686  007FDE  5008               	movf	main@strght,w,c
   687  007FE0  180C               	xorwf	main@last,w,c
   688  007FE2  E103               	bnz	u2331
   689  007FE4  5009               	movf	main@strght+1,w,c
   690  007FE6  180D               	xorwf	main@last+1,w,c
   691  007FE8  A4D8               	btfss	status,2,c
   692  007FEA                     u2331:
   693  007FEA  D6AA               	goto	u1230
   694                           
   695                           ;sample.c: 224: {straight();
   696  007FEC  EC9C  F03D         	call	_straight	;wreg free
   697  007FF0                     l1586:
   698                           
   699                           ;sample.c: 225: last=strght;}
   700  007FF0  C008  F00C         	movff	main@strght,main@last
   701  007FF4  C009  F00D         	movff	main@strght+1,main@last+1
   702                           
   703                           ;sample.c: 226: }
   704  007FF8  D6A3               	goto	u1230
   705  007FFA                     l113:
   706                           
   707                           ;sample.c: 227: else{
   708                           ;sample.c: 228: straight();}
   709  007FFA  EC9C  F03D         	call	_straight	;wreg free
   710  007FFE  D6A0               	goto	u1230
   711  008000                     __end_of_main:
   712                           	opt stack 0
   713                           status	equ	0xFD8
   714                           
   715 ;; *************** function _straight *****************
   716 ;; Defined at:
   717 ;;		line 66 in file "sample.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;		None
   722 ;; Return value:  Size  Location     Type
   723 ;;                  2   46[None  ] int 
   724 ;; Registers used:
   725 ;;		wreg, status,2, status,0, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   731 ;;      Params:         0       0       0       0       0       0       0       0       0
   732 ;;      Locals:         0       0       0       0       0       0       0       0       0
   733 ;;      Temps:          0       0       0       0       0       0       0       0       0
   734 ;;      Totals:         0       0       0       0       0       0       0       0       0
   735 ;;Total ram usage:        0 bytes
   736 ;; Hardware stack levels used:    1
   737 ;; Hardware stack levels required when called:    1
   738 ;; This function calls:
   739 ;;		_wait00
   740 ;; This function is called by:
   741 ;;		_main
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745                           	psect	text1
   746  007B38                     __ptext1:
   747                           	opt stack 0
   748  007B38                     _straight:
   749                           	opt stack 29
   750                           
   751                           ;sample.c: 67: PORTC=0x03;
   752                           
   753                           ;incstack = 0
   754  007B38  0E03               	movlw	3
   755  007B3A  6E82               	movwf	3970,c	;volatile
   756                           
   757                           ;sample.c: 68: wait00(10);
   758  007B3C  0E00               	movlw	0
   759  007B3E  6E02               	movwf	wait00@k+1,c
   760  007B40  0E0A               	movlw	10
   761  007B42  6E01               	movwf	wait00@k,c
   762  007B44  EC5D  F03E         	call	_wait00	;wreg free
   763                           
   764                           ;sample.c: 69: PORTC=0x00;
   765  007B48  0E00               	movlw	0
   766  007B4A  6E82               	movwf	3970,c	;volatile
   767                           
   768                           ;sample.c: 70: wait00(10);
   769  007B4C  0E00               	movlw	0
   770  007B4E  6E02               	movwf	wait00@k+1,c
   771  007B50  0E0A               	movlw	10
   772  007B52  6E01               	movwf	wait00@k,c
   773  007B54  EC5D  F03E         	call	_wait00	;wreg free
   774  007B58  0012               	return		;funcret
   775  007B5A                     __end_of_straight:
   776                           	opt stack 0
   777                           status	equ	0xFD8
   778                           
   779 ;; *************** function _small_right_down *****************
   780 ;; Defined at:
   781 ;;		line 42 in file "sample.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;		None
   786 ;; Return value:  Size  Location     Type
   787 ;;                  2   37[None  ] int 
   788 ;; Registers used:
   789 ;;		wreg, status,2, status,0, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   795 ;;      Params:         0       0       0       0       0       0       0       0       0
   796 ;;      Locals:         0       0       0       0       0       0       0       0       0
   797 ;;      Temps:          0       0       0       0       0       0       0       0       0
   798 ;;      Totals:         0       0       0       0       0       0       0       0       0
   799 ;;Total ram usage:        0 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; Hardware stack levels required when called:    1
   802 ;; This function calls:
   803 ;;		_wait00
   804 ;; This function is called by:
   805 ;;		_main
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text2
   810  007C54                     __ptext2:
   811                           	opt stack 0
   812  007C54                     _small_right_down:
   813                           	opt stack 29
   814                           
   815                           ;sample.c: 43: PORTC=0x03;
   816                           
   817                           ;incstack = 0
   818  007C54  0E03               	movlw	3
   819  007C56  6E82               	movwf	3970,c	;volatile
   820                           
   821                           ;sample.c: 44: wait00(0.3);
   822  007C58  0E00               	movlw	0
   823  007C5A  6E02               	movwf	wait00@k+1,c
   824  007C5C  0E00               	movlw	0
   825  007C5E  6E01               	movwf	wait00@k,c
   826  007C60  EC5D  F03E         	call	_wait00	;wreg free
   827                           
   828                           ;sample.c: 45: PORTC=0x01;
   829  007C64  0E01               	movlw	1
   830  007C66  6E82               	movwf	3970,c	;volatile
   831                           
   832                           ;sample.c: 46: wait00(8);
   833  007C68  0E00               	movlw	0
   834  007C6A  6E02               	movwf	wait00@k+1,c
   835  007C6C  0E08               	movlw	8
   836  007C6E  6E01               	movwf	wait00@k,c
   837  007C70  EC5D  F03E         	call	_wait00	;wreg free
   838                           
   839                           ;sample.c: 47: PORTC=0x00;
   840  007C74  0E00               	movlw	0
   841  007C76  6E82               	movwf	3970,c	;volatile
   842                           
   843                           ;sample.c: 48: wait00(16);
   844  007C78  0E00               	movlw	0
   845  007C7A  6E02               	movwf	wait00@k+1,c
   846  007C7C  0E10               	movlw	16
   847  007C7E  6E01               	movwf	wait00@k,c
   848  007C80  EC5D  F03E         	call	_wait00	;wreg free
   849  007C84  0012               	return		;funcret
   850  007C86                     __end_of_small_right_down:
   851                           	opt stack 0
   852                           status	equ	0xFD8
   853                           
   854 ;; *************** function _small_left_down *****************
   855 ;; Defined at:
   856 ;;		line 24 in file "sample.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;		None
   859 ;; Auto vars:     Size  Location     Type
   860 ;;		None
   861 ;; Return value:  Size  Location     Type
   862 ;;                  2   31[None  ] int 
   863 ;; Registers used:
   864 ;;		wreg, status,2, status,0, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   870 ;;      Params:         0       0       0       0       0       0       0       0       0
   871 ;;      Locals:         0       0       0       0       0       0       0       0       0
   872 ;;      Temps:          0       0       0       0       0       0       0       0       0
   873 ;;      Totals:         0       0       0       0       0       0       0       0       0
   874 ;;Total ram usage:        0 bytes
   875 ;; Hardware stack levels used:    1
   876 ;; Hardware stack levels required when called:    1
   877 ;; This function calls:
   878 ;;		_wait00
   879 ;; This function is called by:
   880 ;;		_main
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884                           	psect	text3
   885  007C22                     __ptext3:
   886                           	opt stack 0
   887  007C22                     _small_left_down:
   888                           	opt stack 29
   889                           
   890                           ;sample.c: 25: PORTC=0x03;
   891                           
   892                           ;incstack = 0
   893  007C22  0E03               	movlw	3
   894  007C24  6E82               	movwf	3970,c	;volatile
   895                           
   896                           ;sample.c: 26: wait00(0.3);
   897  007C26  0E00               	movlw	0
   898  007C28  6E02               	movwf	wait00@k+1,c
   899  007C2A  0E00               	movlw	0
   900  007C2C  6E01               	movwf	wait00@k,c
   901  007C2E  EC5D  F03E         	call	_wait00	;wreg free
   902                           
   903                           ;sample.c: 27: PORTC=0x02;
   904  007C32  0E02               	movlw	2
   905  007C34  6E82               	movwf	3970,c	;volatile
   906                           
   907                           ;sample.c: 28: wait00(8);
   908  007C36  0E00               	movlw	0
   909  007C38  6E02               	movwf	wait00@k+1,c
   910  007C3A  0E08               	movlw	8
   911  007C3C  6E01               	movwf	wait00@k,c
   912  007C3E  EC5D  F03E         	call	_wait00	;wreg free
   913                           
   914                           ;sample.c: 29: PORTC=0x00;
   915  007C42  0E00               	movlw	0
   916  007C44  6E82               	movwf	3970,c	;volatile
   917                           
   918                           ;sample.c: 30: wait00(16);
   919  007C46  0E00               	movlw	0
   920  007C48  6E02               	movwf	wait00@k+1,c
   921  007C4A  0E10               	movlw	16
   922  007C4C  6E01               	movwf	wait00@k,c
   923  007C4E  EC5D  F03E         	call	_wait00	;wreg free
   924  007C52  0012               	return		;funcret
   925  007C54                     __end_of_small_left_down:
   926                           	opt stack 0
   927                           status	equ	0xFD8
   928                           
   929 ;; *************** function _right_down *****************
   930 ;; Defined at:
   931 ;;		line 33 in file "sample.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;                  2   34[None  ] int 
   938 ;; Registers used:
   939 ;;		wreg, status,2, status,0, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   945 ;;      Params:         0       0       0       0       0       0       0       0       0
   946 ;;      Locals:         0       0       0       0       0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0       0       0       0       0
   948 ;;      Totals:         0       0       0       0       0       0       0       0       0
   949 ;;Total ram usage:        0 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    1
   952 ;; This function calls:
   953 ;;		_wait00
   954 ;; This function is called by:
   955 ;;		_main
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959                           	psect	text4
   960  007BF0                     __ptext4:
   961                           	opt stack 0
   962  007BF0                     _right_down:
   963                           	opt stack 29
   964                           
   965                           ;sample.c: 34: PORTC=0x03;
   966                           
   967                           ;incstack = 0
   968  007BF0  0E03               	movlw	3
   969  007BF2  6E82               	movwf	3970,c	;volatile
   970                           
   971                           ;sample.c: 35: wait00(0.3);
   972  007BF4  0E00               	movlw	0
   973  007BF6  6E02               	movwf	wait00@k+1,c
   974  007BF8  0E00               	movlw	0
   975  007BFA  6E01               	movwf	wait00@k,c
   976  007BFC  EC5D  F03E         	call	_wait00	;wreg free
   977                           
   978                           ;sample.c: 36: PORTC=0x01;
   979  007C00  0E01               	movlw	1
   980  007C02  6E82               	movwf	3970,c	;volatile
   981                           
   982                           ;sample.c: 37: wait00(15);
   983  007C04  0E00               	movlw	0
   984  007C06  6E02               	movwf	wait00@k+1,c
   985  007C08  0E0F               	movlw	15
   986  007C0A  6E01               	movwf	wait00@k,c
   987  007C0C  EC5D  F03E         	call	_wait00	;wreg free
   988                           
   989                           ;sample.c: 38: PORTC=0x00;
   990  007C10  0E00               	movlw	0
   991  007C12  6E82               	movwf	3970,c	;volatile
   992                           
   993                           ;sample.c: 39: wait00(20);
   994  007C14  0E00               	movlw	0
   995  007C16  6E02               	movwf	wait00@k+1,c
   996  007C18  0E14               	movlw	20
   997  007C1A  6E01               	movwf	wait00@k,c
   998  007C1C  EC5D  F03E         	call	_wait00	;wreg free
   999  007C20  0012               	return		;funcret
  1000  007C22                     __end_of_right_down:
  1001                           	opt stack 0
  1002                           status	equ	0xFD8
  1003                           
  1004 ;; *************** function _mini_right_down *****************
  1005 ;; Defined at:
  1006 ;;		line 58 in file "sample.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;		None
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;		None
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  2   43[None  ] int 
  1013 ;; Registers used:
  1014 ;;		wreg, status,2, status,0, cstack
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1020 ;;      Params:         0       0       0       0       0       0       0       0       0
  1021 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1023 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1024 ;;Total ram usage:        0 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; Hardware stack levels required when called:    1
  1027 ;; This function calls:
  1028 ;;		_wait00
  1029 ;; This function is called by:
  1030 ;;		_main
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           	psect	text5
  1035  007BBE                     __ptext5:
  1036                           	opt stack 0
  1037  007BBE                     _mini_right_down:
  1038                           	opt stack 29
  1039                           
  1040                           ;sample.c: 59: PORTC=0x03;
  1041                           
  1042                           ;incstack = 0
  1043  007BBE  0E03               	movlw	3
  1044  007BC0  6E82               	movwf	3970,c	;volatile
  1045                           
  1046                           ;sample.c: 60: wait00(0.3);
  1047  007BC2  0E00               	movlw	0
  1048  007BC4  6E02               	movwf	wait00@k+1,c
  1049  007BC6  0E00               	movlw	0
  1050  007BC8  6E01               	movwf	wait00@k,c
  1051  007BCA  EC5D  F03E         	call	_wait00	;wreg free
  1052                           
  1053                           ;sample.c: 61: PORTC=0x01;
  1054  007BCE  0E01               	movlw	1
  1055  007BD0  6E82               	movwf	3970,c	;volatile
  1056                           
  1057                           ;sample.c: 62: wait00(4);
  1058  007BD2  0E00               	movlw	0
  1059  007BD4  6E02               	movwf	wait00@k+1,c
  1060  007BD6  0E04               	movlw	4
  1061  007BD8  6E01               	movwf	wait00@k,c
  1062  007BDA  EC5D  F03E         	call	_wait00	;wreg free
  1063                           
  1064                           ;sample.c: 63: PORTC=0x00;
  1065  007BDE  0E00               	movlw	0
  1066  007BE0  6E82               	movwf	3970,c	;volatile
  1067                           
  1068                           ;sample.c: 64: wait00(8);
  1069  007BE2  0E00               	movlw	0
  1070  007BE4  6E02               	movwf	wait00@k+1,c
  1071  007BE6  0E08               	movlw	8
  1072  007BE8  6E01               	movwf	wait00@k,c
  1073  007BEA  EC5D  F03E         	call	_wait00	;wreg free
  1074  007BEE  0012               	return		;funcret
  1075  007BF0                     __end_of_mini_right_down:
  1076                           	opt stack 0
  1077                           status	equ	0xFD8
  1078                           
  1079 ;; *************** function _mini_left_down *****************
  1080 ;; Defined at:
  1081 ;;		line 50 in file "sample.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;		None
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;		None
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  2   40[None  ] int 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1095 ;;      Params:         0       0       0       0       0       0       0       0       0
  1096 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1098 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1099 ;;Total ram usage:        0 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    1
  1102 ;; This function calls:
  1103 ;;		_wait00
  1104 ;; This function is called by:
  1105 ;;		_main
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text6
  1110  007B8C                     __ptext6:
  1111                           	opt stack 0
  1112  007B8C                     _mini_left_down:
  1113                           	opt stack 29
  1114                           
  1115                           ;sample.c: 51: PORTC=0x03;
  1116                           
  1117                           ;incstack = 0
  1118  007B8C  0E03               	movlw	3
  1119  007B8E  6E82               	movwf	3970,c	;volatile
  1120                           
  1121                           ;sample.c: 52: wait00(0.3);
  1122  007B90  0E00               	movlw	0
  1123  007B92  6E02               	movwf	wait00@k+1,c
  1124  007B94  0E00               	movlw	0
  1125  007B96  6E01               	movwf	wait00@k,c
  1126  007B98  EC5D  F03E         	call	_wait00	;wreg free
  1127                           
  1128                           ;sample.c: 53: PORTC=0x02;
  1129  007B9C  0E02               	movlw	2
  1130  007B9E  6E82               	movwf	3970,c	;volatile
  1131                           
  1132                           ;sample.c: 54: wait00(4);
  1133  007BA0  0E00               	movlw	0
  1134  007BA2  6E02               	movwf	wait00@k+1,c
  1135  007BA4  0E04               	movlw	4
  1136  007BA6  6E01               	movwf	wait00@k,c
  1137  007BA8  EC5D  F03E         	call	_wait00	;wreg free
  1138                           
  1139                           ;sample.c: 55: PORTC=0x00;
  1140  007BAC  0E00               	movlw	0
  1141  007BAE  6E82               	movwf	3970,c	;volatile
  1142                           
  1143                           ;sample.c: 56: wait00(8);
  1144  007BB0  0E00               	movlw	0
  1145  007BB2  6E02               	movwf	wait00@k+1,c
  1146  007BB4  0E08               	movlw	8
  1147  007BB6  6E01               	movwf	wait00@k,c
  1148  007BB8  EC5D  F03E         	call	_wait00	;wreg free
  1149  007BBC  0012               	return		;funcret
  1150  007BBE                     __end_of_mini_left_down:
  1151                           	opt stack 0
  1152                           status	equ	0xFD8
  1153                           
  1154 ;; *************** function _left_down *****************
  1155 ;; Defined at:
  1156 ;;		line 15 in file "sample.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;		None
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  2   28[None  ] int 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1170 ;;      Params:         0       0       0       0       0       0       0       0       0
  1171 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1173 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1174 ;;Total ram usage:        0 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    1
  1177 ;; This function calls:
  1178 ;;		_wait00
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text7
  1185  007B5A                     __ptext7:
  1186                           	opt stack 0
  1187  007B5A                     _left_down:
  1188                           	opt stack 29
  1189                           
  1190                           ;sample.c: 16: PORTC=0x03;
  1191                           
  1192                           ;incstack = 0
  1193  007B5A  0E03               	movlw	3
  1194  007B5C  6E82               	movwf	3970,c	;volatile
  1195                           
  1196                           ;sample.c: 17: wait00(0.3);
  1197  007B5E  0E00               	movlw	0
  1198  007B60  6E02               	movwf	wait00@k+1,c
  1199  007B62  0E00               	movlw	0
  1200  007B64  6E01               	movwf	wait00@k,c
  1201  007B66  EC5D  F03E         	call	_wait00	;wreg free
  1202                           
  1203                           ;sample.c: 18: PORTC=0x02;
  1204  007B6A  0E02               	movlw	2
  1205  007B6C  6E82               	movwf	3970,c	;volatile
  1206                           
  1207                           ;sample.c: 19: wait00(15);
  1208  007B6E  0E00               	movlw	0
  1209  007B70  6E02               	movwf	wait00@k+1,c
  1210  007B72  0E0F               	movlw	15
  1211  007B74  6E01               	movwf	wait00@k,c
  1212  007B76  EC5D  F03E         	call	_wait00	;wreg free
  1213                           
  1214                           ;sample.c: 20: PORTC=0x00;
  1215  007B7A  0E00               	movlw	0
  1216  007B7C  6E82               	movwf	3970,c	;volatile
  1217                           
  1218                           ;sample.c: 21: wait00(20);
  1219  007B7E  0E00               	movlw	0
  1220  007B80  6E02               	movwf	wait00@k+1,c
  1221  007B82  0E14               	movlw	20
  1222  007B84  6E01               	movwf	wait00@k,c
  1223  007B86  EC5D  F03E         	call	_wait00	;wreg free
  1224  007B8A  0012               	return		;funcret
  1225  007B8C                     __end_of_left_down:
  1226                           	opt stack 0
  1227                           status	equ	0xFD8
  1228                           
  1229 ;; *************** function _led_sens *****************
  1230 ;; Defined at:
  1231 ;;		line 79 in file "sample.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;		None
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  2   52[None  ] int 
  1238 ;; Registers used:
  1239 ;;		None
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1245 ;;      Params:         0       0       0       0       0       0       0       0       0
  1246 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1248 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1249 ;;Total ram usage:        0 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text8
  1259  007C86                     __ptext8:
  1260                           	opt stack 0
  1261  007C86                     _led_sens:
  1262                           	opt stack 30
  1263                           
  1264                           ;sample.c: 80: PORTAbits.RA0 = PORTBbits.RB0;
  1265                           
  1266                           ;incstack = 0
  1267  007C86  A081               	btfss	3969,0,c	;volatile
  1268  007C88  D002               	bra	u45
  1269  007C8A  8080               	bsf	3968,0,c	;volatile
  1270  007C8C  D001               	bra	u47
  1271  007C8E                     u45:
  1272  007C8E  9080               	bcf	3968,0,c	;volatile
  1273  007C90                     u47:
  1274                           
  1275                           ;sample.c: 81: PORTAbits.RA1 = PORTBbits.RB1;
  1276  007C90  A281               	btfss	3969,1,c	;volatile
  1277  007C92  D002               	bra	u55
  1278  007C94  8280               	bsf	3968,1,c	;volatile
  1279  007C96  D001               	bra	u57
  1280  007C98                     u55:
  1281  007C98  9280               	bcf	3968,1,c	;volatile
  1282  007C9A                     u57:
  1283                           
  1284                           ;sample.c: 82: PORTAbits.RA2 = PORTBbits.RB2;
  1285  007C9A  A481               	btfss	3969,2,c	;volatile
  1286  007C9C  D002               	bra	u65
  1287  007C9E  8480               	bsf	3968,2,c	;volatile
  1288  007CA0  D001               	bra	u67
  1289  007CA2                     u65:
  1290  007CA2  9480               	bcf	3968,2,c	;volatile
  1291  007CA4                     u67:
  1292                           
  1293                           ;sample.c: 83: PORTAbits.RA3 = PORTBbits.RB3;
  1294  007CA4  A681               	btfss	3969,3,c	;volatile
  1295  007CA6  D002               	bra	u75
  1296  007CA8  8680               	bsf	3968,3,c	;volatile
  1297  007CAA  D001               	bra	u77
  1298  007CAC                     u75:
  1299  007CAC  9680               	bcf	3968,3,c	;volatile
  1300  007CAE                     u77:
  1301                           
  1302                           ;sample.c: 84: PORTAbits.RA4 = PORTBbits.RB4;
  1303  007CAE  A881               	btfss	3969,4,c	;volatile
  1304  007CB0  D002               	bra	u85
  1305  007CB2  8880               	bsf	3968,4,c	;volatile
  1306  007CB4  D001               	bra	u87
  1307  007CB6                     u85:
  1308  007CB6  9880               	bcf	3968,4,c	;volatile
  1309  007CB8                     u87:
  1310  007CB8  0012               	return		;funcret
  1311  007CBA                     __end_of_led_sens:
  1312                           	opt stack 0
  1313                           status	equ	0xFD8
  1314                           
  1315 ;; *************** function _fast_straight *****************
  1316 ;; Defined at:
  1317 ;;		line 72 in file "sample.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;		None
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  2   49[None  ] int 
  1324 ;; Registers used:
  1325 ;;		wreg, status,2, status,0, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1331 ;;      Params:         0       0       0       0       0       0       0       0       0
  1332 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1333 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1334 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1335 ;;Total ram usage:        0 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    1
  1338 ;; This function calls:
  1339 ;;		_wait00
  1340 ;; This function is called by:
  1341 ;;		_main
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text9
  1346  007B16                     __ptext9:
  1347                           	opt stack 0
  1348  007B16                     _fast_straight:
  1349                           	opt stack 29
  1350                           
  1351                           ;sample.c: 73: PORTC=0x03;
  1352                           
  1353                           ;incstack = 0
  1354  007B16  0E03               	movlw	3
  1355  007B18  6E82               	movwf	3970,c	;volatile
  1356                           
  1357                           ;sample.c: 74: wait00(20);
  1358  007B1A  0E00               	movlw	0
  1359  007B1C  6E02               	movwf	wait00@k+1,c
  1360  007B1E  0E14               	movlw	20
  1361  007B20  6E01               	movwf	wait00@k,c
  1362  007B22  EC5D  F03E         	call	_wait00	;wreg free
  1363                           
  1364                           ;sample.c: 75: PORTC=0x00;
  1365  007B26  0E00               	movlw	0
  1366  007B28  6E82               	movwf	3970,c	;volatile
  1367                           
  1368                           ;sample.c: 76: wait00(5);
  1369  007B2A  0E00               	movlw	0
  1370  007B2C  6E02               	movwf	wait00@k+1,c
  1371  007B2E  0E05               	movlw	5
  1372  007B30  6E01               	movwf	wait00@k,c
  1373  007B32  EC5D  F03E         	call	_wait00	;wreg free
  1374  007B36  0012               	return		;funcret
  1375  007B38                     __end_of_fast_straight:
  1376                           	opt stack 0
  1377                           status	equ	0xFD8
  1378                           
  1379 ;; *************** function _wait00 *****************
  1380 ;; Defined at:
  1381 ;;		line 4 in file "sample.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  k               2    0[COMRAM] short 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  i               2    5[COMRAM] short 
  1386 ;;  j               2    3[COMRAM] short 
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  2    0[COMRAM] int 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2, status,0
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1396 ;;      Params:         2       0       0       0       0       0       0       0       0
  1397 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1398 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1399 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1400 ;;Total ram usage:        7 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_left_down
  1406 ;;		_small_left_down
  1407 ;;		_right_down
  1408 ;;		_small_right_down
  1409 ;;		_mini_left_down
  1410 ;;		_mini_right_down
  1411 ;;		_straight
  1412 ;;		_fast_straight
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text10
  1417  007CBA                     __ptext10:
  1418                           	opt stack 0
  1419  007CBA                     _wait00:
  1420                           	opt stack 29
  1421                           
  1422                           ;sample.c: 7: short i;
  1423                           ;sample.c: 8: short j;
  1424                           ;sample.c: 9: for(j=0;j<k;j++){
  1425                           
  1426                           ;incstack = 0
  1427  007CBA  0E00               	movlw	0
  1428  007CBC  6E05               	movwf	wait00@j+1,c
  1429  007CBE  0E00               	movlw	0
  1430  007CC0  6E04               	movwf	wait00@j,c
  1431  007CC2  D011               	goto	l21
  1432  007CC4                     
  1433                           ;sample.c: 10: for(i=0;i<3000;i++){
  1434  007CC4  0E00               	movlw	0
  1435  007CC6  6E07               	movwf	wait00@i+1,c
  1436  007CC8  0E00               	movlw	0
  1437  007CCA  6E06               	movwf	wait00@i,c
  1438  007CCC                     l1172:
  1439  007CCC  BE07               	btfsc	wait00@i+1,7,c
  1440  007CCE  D006               	goto	l23
  1441  007CD0  0EB8               	movlw	184
  1442  007CD2  5C06               	subwf	wait00@i,w,c
  1443  007CD4  0E0B               	movlw	11
  1444  007CD6  5807               	subwfb	wait00@i+1,w,c
  1445  007CD8  B0D8               	btfsc	status,0,c
  1446  007CDA  D003               	goto	u1210
  1447  007CDC                     l23:
  1448  007CDC  4A06               	infsnz	wait00@i,f,c
  1449  007CDE  2A07               	incf	wait00@i+1,f,c
  1450  007CE0  D7F5               	goto	l1172
  1451  007CE2                     u1210:
  1452  007CE2  4A04               	infsnz	wait00@j,f,c
  1453  007CE4  2A05               	incf	wait00@j+1,f,c
  1454  007CE6                     l21:
  1455  007CE6  5001               	movf	wait00@k,w,c
  1456  007CE8  5C04               	subwf	wait00@j,w,c
  1457  007CEA  5005               	movf	wait00@j+1,w,c
  1458  007CEC  0A80               	xorlw	128
  1459  007CEE  6E03               	movwf	??_wait00& (0+255),c
  1460  007CF0  5002               	movf	wait00@k+1,w,c
  1461  007CF2  0A80               	xorlw	128
  1462  007CF4  5803               	subwfb	??_wait00& (0+255),w,c
  1463  007CF6  B0D8               	btfsc	status,0,c
  1464  007CF8  0012               	return	
  1465  007CFA  D7E4               	goto	l22
  1466  007CFC                     __end_of_wait00:
  1467                           	opt stack 0
  1468  0000                     status	equ	0xFD8
  1469                           status	equ	0xFD8
  1470                           
  1471                           	psect	rparam
  1472  0000                     status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      17
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _straight->_wait00
    _small_right_down->_wait00
    _small_left_down->_wait00
    _right_down->_wait00
    _mini_right_down->_wait00
    _mini_left_down->_wait00
    _left_down->_wait00
    _fast_straight->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   15038
                                              7 COMRAM    10    10      0
                      _fast_straight
                           _led_sens
                          _left_down
                     _mini_left_down
                    _mini_right_down
                         _right_down
                    _small_left_down
                   _small_right_down
                           _straight
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _small_right_down                                     0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _small_left_down                                      0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _right_down                                           0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _mini_right_down                                      0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _mini_left_down                                       0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _left_down                                            0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fast_straight                                        0     0      0    1764
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2    1764
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fast_straight
     _wait00
   _led_sens
   _left_down
     _wait00
   _mini_left_down
     _wait00
   _mini_right_down
     _wait00
   _right_down
     _wait00
   _small_left_down
     _wait00
   _small_right_down
     _wait00
   _straight
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     11      11       1       17.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 28 20:37:22 2018

                       l21 7CE6                         l22 7CC4                         l23 7CDC  
                       l70 7DCA                         l62 7D64                         l71 7DC4  
                       l80 7E2A                         l64 7D88                         l65 7D82  
                       l90 7EA8                         l82 7E48                         l74 7DE0  
                       l58 7D3C                         l59 7D38                         l92 7ECC  
                       l84 7E66                         l76 7DF6                         l68 7DA6  
                       l93 7EC6                         l86 7E8A                         l78 7E0C  
                       l87 7E84                         l96 7EE2                         l98 7EF8  
                       u45 7C8E                         u55 7C98                         u47 7C90  
                       u65 7CA2                         u57 7C9A                         u75 7CAC  
                       u67 7CA4                         u85 7CB6                         u77 7CAE  
                       u87 7CB8                        l100 7F0E                        l102 7F2C  
                      l104 7F4A                        l113 7FFA                        l114 7FC2  
                      l106 7F96                        l107 7F6E                        l116 7FDE  
                      l109 7F82                       l1172 7CCC                       l1414 7E5E  
                     l1280 7D5A                       l1532 7F40                       l1550 7F6E  
                     l1518 7F22                       l1384 7E20                       l1580 7FD4  
                     l1556 7F82                       l1582 7FDE                       l1574 7FB8  
                     l1398 7E3E                       l1576 7FC2                       l1586 7FF0  
                     u1210 7CE2                       u1230 7D40                       u2331 7FEA  
                     u2251 7F8E                       _main 7CFC            ??_fast_straight 0008  
                     start 2000               ___param_bank 000000                      ?_main 0001  
                    _PORTA 000F80                      _PORTB 000F81                      _PORTC 000F82  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
__size_of_small_right_down 0032            _small_left_down 7C22                      status 000FD8  
          __initialization 7B10               __end_of_main 8000                     ??_main 0008  
            __activetblptr 000000                     _ADCON1 000FC1           ??_mini_left_down 0008  
         __end_of_led_sens 7CBA                     _wait00 7CBA    __end_of_small_left_down 7C54  
         __end_of_straight 7B5A                 __accesstop 0060    __end_of__initialization 7B10  
            ___rparam_used 000001   __size_of_mini_right_down 0032             __pcstackCOMRAM 0001  
         _small_right_down 7C54         __size_of_left_down 0032                    ?_wait00 0001  
         ?_small_left_down 0001                  ?_led_sens 0001      __end_of_fast_straight 7B38  
                  __Hparam 0000                    __Lparam 0000                  ?_straight 0001  
                  __pcinit 7B10                    __ramtop 0800            __size_of_wait00 0042  
        __end_of_left_down 7B8C                    __ptext0 7CFC                    __ptext1 7B38  
                  __ptext2 7C54                    __ptext3 7C22                    __ptext4 7BF0  
                  __ptext5 7BBE                    __ptext6 7B8C                    __ptext7 7B5A  
                  __ptext8 7C86                    __ptext9 7B16          ??_mini_right_down 0008  
     end_of_initialization 7B10                 ??_led_sens 0001                    wait00@i 0006  
                  wait00@j 0004                    wait00@k 0001                 _right_down 7BF0  
               ??_straight 0008                  _PORTAbits 000F80                  _PORTBbits 000F81  
               main@strght 0008   __end_of_small_right_down 7C86             __end_of_wait00 7CFC  
      start_initialization 7B10                ?_right_down 0001    __size_of_mini_left_down 0032  
                 ??_wait00 0003          __size_of_led_sens 0034            _mini_right_down 7BBE  
        __size_of_straight 0022                  _left_down 7B5A        __size_of_right_down 0032  
 __size_of_small_left_down 0032                  main@right 000E                 ?_left_down 0001  
   __size_of_fast_straight 0022    __end_of_mini_right_down 7BF0                   __Hrparam 0000  
           _mini_left_down 7B8C                   __Lrparam 0000          ?_small_right_down 0001  
       ??_small_right_down 0008                   __ptext10 7CBA                   _led_sens 7C86  
            __size_of_main 0304     __end_of_mini_left_down 7BBE               ??_right_down 0008  
            _fast_straight 7B16          ??_small_left_down 0008                   main@flag 000A  
                 main@left 0010                   main@last 000C                   _straight 7B38  
              ??_left_down 0008         __end_of_right_down 7C22           ?_mini_right_down 0001  
          ?_mini_left_down 0001             ?_fast_straight 0001  
