

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 28 16:01:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 1.45
    20                           ; Generated 16/11/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F2553 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _PORTB	set	3969
    54  0000                     _PORTA	set	3968
    55  0000                     _TRISC	set	3988
    56  0000                     _TRISB	set	3987
    57  0000                     _TRISA	set	3986
    58  0000                     _ADCON1	set	4033
    59  0000                     _PORTBbits	set	3969
    60  0000                     _PORTAbits	set	3968
    61  0000                     _PORTC	set	3970
    62                           
    63                           ; #config settings
    64                           
    65                           	psect	cinit
    66  007C66                     __pcinit:
    67                           	opt stack 0
    68  007C66                     start_initialization:
    69                           	opt stack 0
    70  007C66                     __initialization:
    71                           	opt stack 0
    72  007C66                     end_of_initialization:
    73                           	opt stack 0
    74  007C66                     __end_of__initialization:
    75                           	opt stack 0
    76  007C66  0E00               	movlw	low (__Lmediumconst shr (0+16))
    77  007C68  6EF8               	movwf	tblptru,c
    78  007C6A  0100               	movlb	0
    79  007C6C  EFF9  F03E         	goto	_main	;jump to C main() function
    80                           tblptru	equ	0xFF8
    81                           
    82                           	psect	cstackCOMRAM
    83  000001                     __pcstackCOMRAM:
    84                           	opt stack 0
    85  000001                     wait00@k:
    86                           	opt stack 0
    87                           
    88                           ; 2 bytes @ 0x0
    89  000001                     	ds	2
    90  000003                     ??_wait00:
    91                           
    92                           ; 1 bytes @ 0x2
    93  000003                     	ds	1
    94  000004                     wait00@j:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x3
    98  000004                     	ds	2
    99  000006                     wait00@i:
   100                           	opt stack 0
   101                           
   102                           ; 2 bytes @ 0x5
   103  000006                     	ds	2
   104  000008                     tblptru	equ	0xFF8
   105                           
   106                           ; 1 bytes @ 0x7
   107 ;;
   108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   109 ;;
   110 ;; *************** function _main *****************
   111 ;; Defined at:
   112 ;;		line 77 in file "sample.c"
   113 ;; Parameters:    Size  Location     Type
   114 ;;		None
   115 ;; Auto vars:     Size  Location     Type
   116 ;;		None
   117 ;; Return value:  Size  Location     Type
   118 ;;                  2   51[None  ] int 
   119 ;; Registers used:
   120 ;;		wreg, status,2, status,0, cstack
   121 ;; Tracked objects:
   122 ;;		On entry : 0/0
   123 ;;		On exit  : 0/0
   124 ;;		Unchanged: 0/0
   125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   126 ;;      Params:         0       0       0       0       0       0       0       0       0
   127 ;;      Locals:         0       0       0       0       0       0       0       0       0
   128 ;;      Temps:          0       0       0       0       0       0       0       0       0
   129 ;;      Totals:         0       0       0       0       0       0       0       0       0
   130 ;;Total ram usage:        0 bytes
   131 ;; Hardware stack levels required when called:    2
   132 ;; This function calls:
   133 ;;		_do_sth
   134 ;;		_led_sens
   135 ;;		_left_down
   136 ;;		_right_down
   137 ;;		_small_left_down
   138 ;;		_small_right_down
   139 ;;		_straight
   140 ;; This function is called by:
   141 ;;		Startup code after reset
   142 ;; This function uses a non-reentrant model
   143 ;;
   144                           
   145                           	psect	text0
   146  007DF2                     __ptext0:
   147                           	opt stack 0
   148  007DF2                     _main:
   149                           	opt stack 29
   150                           
   151                           ;sample.c: 80: ADCON1 = 0x0F;
   152                           
   153                           ;incstack = 0
   154  007DF2  0E0F               	movlw	15
   155  007DF4  6EC1               	movwf	4033,c	;volatile
   156                           
   157                           ;sample.c: 83: TRISA = 0x20;
   158  007DF6  0E20               	movlw	32
   159  007DF8  6E92               	movwf	3986,c	;volatile
   160                           
   161                           ;sample.c: 84: TRISB = 0xFF;
   162  007DFA  6893               	setf	3987,c	;volatile
   163                           
   164                           ;sample.c: 85: TRISC = 0x00;
   165  007DFC  0E00               	movlw	0
   166  007DFE  6E94               	movwf	3988,c	;volatile
   167                           
   168                           ;sample.c: 88: PORTA = 0x00;
   169  007E00  0E00               	movlw	0
   170  007E02  6E80               	movwf	3968,c	;volatile
   171                           
   172                           ;sample.c: 89: PORTB = 0x00;
   173  007E04  0E00               	movlw	0
   174  007E06  6E81               	movwf	3969,c	;volatile
   175                           
   176                           ;sample.c: 90: PORTC = 0x00;
   177  007E08  0E00               	movlw	0
   178  007E0A  6E82               	movwf	3970,c	;volatile
   179                           
   180                           ;sample.c: 93: while(PORTAbits.RA5==1){
   181  007E0C  D002               	goto	l52
   182  007E0E                     
   183                           ;sample.c: 94: led_sens();
   184  007E0E  ECBE  F03E         	call	_led_sens	;wreg free
   185  007E12                     l52:
   186  007E12  BA80               	btfsc	3968,5,c	;volatile
   187  007E14  D7FC               	goto	l53
   188  007E16                     u880:
   189                           
   190                           ;sample.c: 100: led_sens();
   191                           
   192                           ;sample.c: 95: }
   193                           ;sample.c: 99: while(1){
   194  007E16  ECBE  F03E         	call	_led_sens	;wreg free
   195                           
   196                           ;sample.c: 102: switch (PORTBbits.RB0) {
   197  007E1A  D0E6               	goto	l56
   198  007E1C                     l59:
   199                           
   200                           ;sample.c: 106: if (PORTBbits.RB2==0) {
   201  007E1C  B481               	btfsc	3969,2,c	;volatile
   202  007E1E  D018               	goto	l60
   203                           
   204                           ;sample.c: 107: if (PORTBbits.RB3==0 && PORTBbits.RB4==0) straight();
   205  007E20  A681               	btfss	3969,3,c	;volatile
   206  007E22  B881               	btfsc	3969,4,c	;volatile
   207  007E24  D003               	goto	l61
   208  007E26  EC49  F03E         	call	_straight	;wreg free
   209  007E2A  D7F5               	goto	u880
   210  007E2C                     l61:
   211                           
   212                           ;sample.c: 108: else if (PORTBbits.RB3==0 && PORTBbits.RB4==1) right_down();
   213  007E2C  A681               	btfss	3969,3,c	;volatile
   214  007E2E  A881               	btfss	3969,4,c	;volatile
   215  007E30  D003               	goto	l63
   216  007E32  EC73  F03E         	call	_right_down	;wreg free
   217  007E36  D7EF               	goto	u880
   218  007E38                     l63:
   219                           
   220                           ;sample.c: 109: else if (PORTBbits.RB3==1 && PORTBbits.RB4==0) small_right_down();
   221  007E38  B681               	btfsc	3969,3,c	;volatile
   222  007E3A  B881               	btfsc	3969,4,c	;volatile
   223  007E3C  D003               	goto	l65
   224  007E3E  ECA5  F03E         	call	_small_right_down	;wreg free
   225  007E42  D7E9               	goto	u880
   226  007E44                     l65:
   227                           
   228                           ;sample.c: 110: else if (PORTBbits.RB3==1 && PORTBbits.RB4==1) right_down();
   229  007E44  B681               	btfsc	3969,3,c	;volatile
   230  007E46  A881               	btfss	3969,4,c	;volatile
   231  007E48  D7E6               	goto	u880
   232  007E4A  EC73  F03E         	call	_right_down	;wreg free
   233                           
   234                           ;sample.c: 111: } else if (PORTBbits.RB2==1) {
   235  007E4E  D7E3               	goto	u880
   236  007E50                     l60:
   237  007E50  A481               	btfss	3969,2,c	;volatile
   238  007E52  D7E1               	goto	u880
   239                           
   240                           ;sample.c: 112: if (PORTBbits.RB3==0 && PORTBbits.RB4==0) straight();
   241  007E54  A681               	btfss	3969,3,c	;volatile
   242  007E56  B881               	btfsc	3969,4,c	;volatile
   243  007E58  D003               	goto	l70
   244  007E5A  EC49  F03E         	call	_straight	;wreg free
   245  007E5E  D7DB               	goto	u880
   246  007E60                     l70:
   247                           
   248                           ;sample.c: 113: else if (PORTBbits.RB3==0 && PORTBbits.RB4==1) do_sth();
   249  007E60  A681               	btfss	3969,3,c	;volatile
   250  007E62  A881               	btfss	3969,4,c	;volatile
   251  007E64  D003               	goto	l72
   252  007E66  EC38  F03E         	call	_do_sth	;wreg free
   253  007E6A  D7D5               	goto	u880
   254  007E6C                     l72:
   255                           
   256                           ;sample.c: 114: else if (PORTBbits.RB3==1 && PORTBbits.RB4==0) small_right_down();
   257  007E6C  B681               	btfsc	3969,3,c	;volatile
   258  007E6E  B881               	btfsc	3969,4,c	;volatile
   259  007E70  D003               	goto	l74
   260  007E72  ECA5  F03E         	call	_small_right_down	;wreg free
   261  007E76  D7CF               	goto	u880
   262  007E78                     l74:
   263                           
   264                           ;sample.c: 115: else if (PORTBbits.RB3==1 && PORTBbits.RB4==1) left_down();
   265  007E78  B681               	btfsc	3969,3,c	;volatile
   266  007E7A  A881               	btfss	3969,4,c	;volatile
   267  007E7C  D7CC               	goto	u880
   268  007E7E  EC5A  F03E         	call	_left_down	;wreg free
   269                           
   270                           ;sample.c: 116: }
   271                           ;sample.c: 117: break;
   272  007E82  D7C9               	goto	u880
   273  007E84                     l78:
   274                           
   275                           ;sample.c: 119: if (PORTBbits.RB2==0) {
   276  007E84  B481               	btfsc	3969,2,c	;volatile
   277  007E86  D018               	goto	l79
   278                           
   279                           ;sample.c: 120: if (PORTBbits.RB3==0 && PORTBbits.RB4==0) small_left_down();
   280  007E88  A681               	btfss	3969,3,c	;volatile
   281  007E8A  B881               	btfsc	3969,4,c	;volatile
   282  007E8C  D003               	goto	l80
   283  007E8E  EC8C  F03E         	call	_small_left_down	;wreg free
   284  007E92  D7C1               	goto	u880
   285  007E94                     l80:
   286                           
   287                           ;sample.c: 121: else if (PORTBbits.RB3==0 && PORTBbits.RB4==1) do_sth();
   288  007E94  A681               	btfss	3969,3,c	;volatile
   289  007E96  A881               	btfss	3969,4,c	;volatile
   290  007E98  D003               	goto	l82
   291  007E9A  EC38  F03E         	call	_do_sth	;wreg free
   292  007E9E  D7BB               	goto	u880
   293  007EA0                     l82:
   294                           
   295                           ;sample.c: 122: else if (PORTBbits.RB3==1 && PORTBbits.RB4==0) do_sth();
   296  007EA0  B681               	btfsc	3969,3,c	;volatile
   297  007EA2  B881               	btfsc	3969,4,c	;volatile
   298  007EA4  D003               	goto	l84
   299  007EA6  EC38  F03E         	call	_do_sth	;wreg free
   300  007EAA  D7B5               	goto	u880
   301  007EAC                     l84:
   302                           
   303                           ;sample.c: 123: else if (PORTBbits.RB3==1 && PORTBbits.RB4==1) do_sth();
   304  007EAC  B681               	btfsc	3969,3,c	;volatile
   305  007EAE  A881               	btfss	3969,4,c	;volatile
   306  007EB0  D7B2               	goto	u880
   307  007EB2  EC38  F03E         	call	_do_sth	;wreg free
   308                           
   309                           ;sample.c: 124: } else if (PORTBbits.RB2==1) {
   310  007EB6  D7AF               	goto	u880
   311  007EB8                     l79:
   312  007EB8  A481               	btfss	3969,2,c	;volatile
   313  007EBA  D7AD               	goto	u880
   314                           
   315                           ;sample.c: 125: if (PORTBbits.RB3==0 && PORTBbits.RB4==0) small_left_down();
   316  007EBC  A681               	btfss	3969,3,c	;volatile
   317  007EBE  B881               	btfsc	3969,4,c	;volatile
   318  007EC0  D003               	goto	l89
   319  007EC2  EC8C  F03E         	call	_small_left_down	;wreg free
   320  007EC6  D7A7               	goto	u880
   321  007EC8                     l89:
   322                           
   323                           ;sample.c: 126: else if (PORTBbits.RB3==0 && PORTBbits.RB4==1) do_sth();
   324  007EC8  A681               	btfss	3969,3,c	;volatile
   325  007ECA  A881               	btfss	3969,4,c	;volatile
   326  007ECC  D003               	goto	l91
   327  007ECE  EC38  F03E         	call	_do_sth	;wreg free
   328  007ED2  D7A1               	goto	u880
   329  007ED4                     l91:
   330                           
   331                           ;sample.c: 127: else if (PORTBbits.RB3==1 && PORTBbits.RB4==0) straight();
   332  007ED4  B681               	btfsc	3969,3,c	;volatile
   333  007ED6  B881               	btfsc	3969,4,c	;volatile
   334  007ED8  D003               	goto	l93
   335  007EDA  EC49  F03E         	call	_straight	;wreg free
   336  007EDE  D79B               	goto	u880
   337  007EE0                     l93:
   338                           
   339                           ;sample.c: 128: else if (PORTBbits.RB3==1 && PORTBbits.RB4==1) left_down();
   340  007EE0  B681               	btfsc	3969,3,c	;volatile
   341  007EE2  A881               	btfss	3969,4,c	;volatile
   342  007EE4  D798               	goto	u880
   343  007EE6  EC5A  F03E         	call	_left_down	;wreg free
   344                           
   345                           ;sample.c: 132: }
   346                           
   347                           ;sample.c: 131: default: break;
   348                           
   349                           ;sample.c: 129: }
   350                           ;sample.c: 130: break;
   351  007EEA  D795               	goto	u880
   352  007EEC  A281               	btfss	3969,1,c	;volatile
   353  007EEE  D002               	goto	u1250
   354  007EF0  0E01               	movlw	1
   355  007EF2  D001               	goto	u1256
   356  007EF4                     u1250:
   357  007EF4  0E00               	movlw	0
   358  007EF6                     u1256:
   359                           
   360                           ; Switch size 1, requested type "space"
   361                           ; Number of cases is 2, Range of values is 0 to 1
   362                           ; switch strategies available:
   363                           ; Name         Instructions Cycles
   364                           ; simple_byte            7     4 (average)
   365                           ;	Chosen strategy is simple_byte
   366  007EF6  0A00               	xorlw	0	; case 0
   367  007EF8  B4D8               	btfsc	status,2,c
   368  007EFA  D790               	goto	l59
   369  007EFC  0A01               	xorlw	1	; case 1
   370  007EFE  B4D8               	btfsc	status,2,c
   371  007F00  D7C1               	goto	l78
   372                           
   373                           ;sample.c: 133: break;
   374  007F02  D789               	goto	u880
   375  007F04                     l100:
   376                           
   377                           ;sample.c: 137: if (PORTBbits.RB2==0) {
   378  007F04  B481               	btfsc	3969,2,c	;volatile
   379  007F06  D018               	goto	l101
   380                           
   381                           ;sample.c: 138: if (PORTBbits.RB3==0 && PORTBbits.RB4==0) left_down();
   382  007F08  A681               	btfss	3969,3,c	;volatile
   383  007F0A  B881               	btfsc	3969,4,c	;volatile
   384  007F0C  D003               	goto	l102
   385  007F0E  EC5A  F03E         	call	_left_down	;wreg free
   386  007F12  D781               	goto	u880
   387  007F14                     l102:
   388                           
   389                           ;sample.c: 139: else if (PORTBbits.RB3==0 && PORTBbits.RB4==1) straight();
   390  007F14  A681               	btfss	3969,3,c	;volatile
   391  007F16  A881               	btfss	3969,4,c	;volatile
   392  007F18  D003               	goto	l104
   393  007F1A  EC49  F03E         	call	_straight	;wreg free
   394  007F1E  D77B               	goto	u880
   395  007F20                     l104:
   396                           
   397                           ;sample.c: 140: else if (PORTBbits.RB3==1 && PORTBbits.RB4==0) do_sth();
   398  007F20  B681               	btfsc	3969,3,c	;volatile
   399  007F22  B881               	btfsc	3969,4,c	;volatile
   400  007F24  D003               	goto	l106
   401  007F26  EC38  F03E         	call	_do_sth	;wreg free
   402  007F2A  D775               	goto	u880
   403  007F2C                     l106:
   404                           
   405                           ;sample.c: 141: else if (PORTBbits.RB3==1 && PORTBbits.RB4==1) small_left_down();
   406  007F2C  B681               	btfsc	3969,3,c	;volatile
   407  007F2E  A881               	btfss	3969,4,c	;volatile
   408  007F30  D772               	goto	u880
   409  007F32  EC8C  F03E         	call	_small_left_down	;wreg free
   410                           
   411                           ;sample.c: 142: } else if (PORTBbits.RB2==1) {
   412  007F36  D76F               	goto	u880
   413  007F38                     l101:
   414  007F38  A481               	btfss	3969,2,c	;volatile
   415  007F3A  D76D               	goto	u880
   416                           
   417                           ;sample.c: 143: if (PORTBbits.RB3==0 && PORTBbits.RB4==0) do_sth();
   418  007F3C  A681               	btfss	3969,3,c	;volatile
   419  007F3E  B881               	btfsc	3969,4,c	;volatile
   420  007F40  D003               	goto	l111
   421  007F42  EC38  F03E         	call	_do_sth	;wreg free
   422  007F46  D767               	goto	u880
   423  007F48                     l111:
   424                           
   425                           ;sample.c: 144: else if (PORTBbits.RB3==0 && PORTBbits.RB4==1) do_sth();
   426  007F48  A681               	btfss	3969,3,c	;volatile
   427  007F4A  A881               	btfss	3969,4,c	;volatile
   428  007F4C  D003               	goto	l113
   429  007F4E  EC38  F03E         	call	_do_sth	;wreg free
   430  007F52  D761               	goto	u880
   431  007F54                     l113:
   432                           
   433                           ;sample.c: 145: else if (PORTBbits.RB3==1 && PORTBbits.RB4==0) do_sth();
   434  007F54  B681               	btfsc	3969,3,c	;volatile
   435  007F56  B881               	btfsc	3969,4,c	;volatile
   436  007F58  D003               	goto	l115
   437  007F5A  EC38  F03E         	call	_do_sth	;wreg free
   438  007F5E  D75B               	goto	u880
   439  007F60                     l115:
   440                           
   441                           ;sample.c: 146: else if (PORTBbits.RB3==1 && PORTBbits.RB4==1) small_left_down();
   442  007F60  B681               	btfsc	3969,3,c	;volatile
   443  007F62  A881               	btfss	3969,4,c	;volatile
   444  007F64  D758               	goto	u880
   445  007F66  EC8C  F03E         	call	_small_left_down	;wreg free
   446                           
   447                           ;sample.c: 147: }
   448                           ;sample.c: 148: break;
   449  007F6A  D755               	goto	u880
   450  007F6C                     l119:
   451                           
   452                           ;sample.c: 150: if (PORTBbits.RB2==0) {
   453  007F6C  B481               	btfsc	3969,2,c	;volatile
   454  007F6E  D018               	goto	l120
   455                           
   456                           ;sample.c: 151: if (PORTBbits.RB3==0 && PORTBbits.RB4==0) left_down();
   457  007F70  A681               	btfss	3969,3,c	;volatile
   458  007F72  B881               	btfsc	3969,4,c	;volatile
   459  007F74  D003               	goto	l121
   460  007F76  EC5A  F03E         	call	_left_down	;wreg free
   461  007F7A  D74D               	goto	u880
   462  007F7C                     l121:
   463                           
   464                           ;sample.c: 152: else if (PORTBbits.RB3==0 && PORTBbits.RB4==1) small_right_down();
   465  007F7C  A681               	btfss	3969,3,c	;volatile
   466  007F7E  A881               	btfss	3969,4,c	;volatile
   467  007F80  D003               	goto	l123
   468  007F82  ECA5  F03E         	call	_small_right_down	;wreg free
   469  007F86  D747               	goto	u880
   470  007F88                     l123:
   471                           
   472                           ;sample.c: 153: else if (PORTBbits.RB3==1 && PORTBbits.RB4==0) do_sth();
   473  007F88  B681               	btfsc	3969,3,c	;volatile
   474  007F8A  B881               	btfsc	3969,4,c	;volatile
   475  007F8C  D003               	goto	l125
   476  007F8E  EC38  F03E         	call	_do_sth	;wreg free
   477  007F92  D741               	goto	u880
   478  007F94                     l125:
   479                           
   480                           ;sample.c: 154: else if (PORTBbits.RB3==1 && PORTBbits.RB4==1) straight();
   481  007F94  B681               	btfsc	3969,3,c	;volatile
   482  007F96  A881               	btfss	3969,4,c	;volatile
   483  007F98  D73E               	goto	u880
   484  007F9A  EC49  F03E         	call	_straight	;wreg free
   485                           
   486                           ;sample.c: 155: } else if (PORTBbits.RB2==1) {
   487  007F9E  D73B               	goto	u880
   488  007FA0                     l120:
   489  007FA0  A481               	btfss	3969,2,c	;volatile
   490  007FA2  D739               	goto	u880
   491                           
   492                           ;sample.c: 156: if (PORTBbits.RB3==0 && PORTBbits.RB4==0) right_down();
   493  007FA4  A681               	btfss	3969,3,c	;volatile
   494  007FA6  B881               	btfsc	3969,4,c	;volatile
   495  007FA8  D003               	goto	l130
   496  007FAA  EC73  F03E         	call	_right_down	;wreg free
   497  007FAE  D733               	goto	u880
   498  007FB0                     l130:
   499                           
   500                           ;sample.c: 157: else if (PORTBbits.RB3==0 && PORTBbits.RB4==1) small_right_down();
   501  007FB0  A681               	btfss	3969,3,c	;volatile
   502  007FB2  A881               	btfss	3969,4,c	;volatile
   503  007FB4  D003               	goto	l132
   504  007FB6  ECA5  F03E         	call	_small_right_down	;wreg free
   505  007FBA  D72D               	goto	u880
   506  007FBC                     l132:
   507                           
   508                           ;sample.c: 158: else if (PORTBbits.RB3==1 && PORTBbits.RB4==0) right_down;
   509  007FBC  A681               	btfss	3969,3,c	;volatile
   510  007FBE  D002               	goto	l134
   511  007FC0  A881               	btfss	3969,4,c	;volatile
   512  007FC2  D729               	goto	u880
   513  007FC4                     l134:
   514                           
   515                           ;sample.c: 159: else if (PORTBbits.RB3==1 && PORTBbits.RB4==1) straight();
   516  007FC4  B681               	btfsc	3969,3,c	;volatile
   517  007FC6  A881               	btfss	3969,4,c	;volatile
   518  007FC8  D726               	goto	u880
   519  007FCA  EC49  F03E         	call	_straight	;wreg free
   520                           
   521                           ;sample.c: 163: }
   522                           
   523                           ;sample.c: 162: default: break;
   524                           
   525                           ;sample.c: 160: }
   526                           ;sample.c: 161: break;
   527  007FCE  D723               	goto	u880
   528  007FD0  A281               	btfss	3969,1,c	;volatile
   529  007FD2  D002               	goto	u1620
   530  007FD4  0E01               	movlw	1
   531  007FD6  D001               	goto	u1626
   532  007FD8                     u1620:
   533  007FD8  0E00               	movlw	0
   534  007FDA                     u1626:
   535                           
   536                           ; Switch size 1, requested type "space"
   537                           ; Number of cases is 2, Range of values is 0 to 1
   538                           ; switch strategies available:
   539                           ; Name         Instructions Cycles
   540                           ; simple_byte            7     4 (average)
   541                           ;	Chosen strategy is simple_byte
   542  007FDA  0A00               	xorlw	0	; case 0
   543  007FDC  B4D8               	btfsc	status,2,c
   544  007FDE  D792               	goto	l100
   545  007FE0  0A01               	xorlw	1	; case 1
   546  007FE2  B4D8               	btfsc	status,2,c
   547  007FE4  D7C3               	goto	l119
   548                           
   549                           ;sample.c: 166: }
   550                           
   551                           ;sample.c: 165: default: break;
   552                           
   553                           ;sample.c: 164: break;
   554  007FE6  D717               	goto	u880
   555  007FE8                     l56:
   556  007FE8  A081               	btfss	3969,0,c	;volatile
   557  007FEA  D002               	goto	u1630
   558  007FEC  0E01               	movlw	1
   559  007FEE  D001               	goto	u1636
   560  007FF0                     u1630:
   561  007FF0  0E00               	movlw	0
   562  007FF2                     u1636:
   563                           
   564                           ; Switch size 1, requested type "space"
   565                           ; Number of cases is 2, Range of values is 0 to 1
   566                           ; switch strategies available:
   567                           ; Name         Instructions Cycles
   568                           ; simple_byte            7     4 (average)
   569                           ;	Chosen strategy is simple_byte
   570  007FF2  0A00               	xorlw	0	; case 0
   571  007FF4  B4D8               	btfsc	status,2,c
   572  007FF6  D77A               	goto	l58
   573  007FF8  0A01               	xorlw	1	; case 1
   574  007FFA  B4D8               	btfsc	status,2,c
   575  007FFC  D7E9               	goto	l99
   576  007FFE  D70B               	goto	u880
   577  008000                     __end_of_main:
   578                           	opt stack 0
   579                           tblptru	equ	0xFF8
   580                           status	equ	0xFD8
   581                           
   582 ;; *************** function _straight *****************
   583 ;; Defined at:
   584 ;;		line 54 in file "sample.c"
   585 ;; Parameters:    Size  Location     Type
   586 ;;		None
   587 ;; Auto vars:     Size  Location     Type
   588 ;;		None
   589 ;; Return value:  Size  Location     Type
   590 ;;                  2   40[None  ] int 
   591 ;; Registers used:
   592 ;;		wreg, status,2, status,0, cstack
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   598 ;;      Params:         0       0       0       0       0       0       0       0       0
   599 ;;      Locals:         0       0       0       0       0       0       0       0       0
   600 ;;      Temps:          0       0       0       0       0       0       0       0       0
   601 ;;      Totals:         0       0       0       0       0       0       0       0       0
   602 ;;Total ram usage:        0 bytes
   603 ;; Hardware stack levels used:    1
   604 ;; Hardware stack levels required when called:    1
   605 ;; This function calls:
   606 ;;		_wait00
   607 ;; This function is called by:
   608 ;;		_main
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           	psect	text1
   613  007C92                     __ptext1:
   614                           	opt stack 0
   615  007C92                     _straight:
   616                           	opt stack 29
   617                           
   618                           ;sample.c: 55: PORTC=0x03;
   619                           
   620                           ;incstack = 0
   621  007C92  0E03               	movlw	3
   622  007C94  6E82               	movwf	3970,c	;volatile
   623                           
   624                           ;sample.c: 56: wait00(1);
   625  007C96  0E00               	movlw	0
   626  007C98  6E02               	movwf	wait00@k+1,c
   627  007C9A  0E01               	movlw	1
   628  007C9C  6E01               	movwf	wait00@k,c
   629  007C9E  ECD8  F03E         	call	_wait00	;wreg free
   630                           
   631                           ;sample.c: 57: PORTC=0x00;
   632  007CA2  0E00               	movlw	0
   633  007CA4  6E82               	movwf	3970,c	;volatile
   634                           
   635                           ;sample.c: 58: wait00(20);
   636  007CA6  0E00               	movlw	0
   637  007CA8  6E02               	movwf	wait00@k+1,c
   638  007CAA  0E14               	movlw	20
   639  007CAC  6E01               	movwf	wait00@k,c
   640  007CAE  ECD8  F03E         	call	_wait00	;wreg free
   641  007CB2  0012               	return		;funcret
   642  007CB4                     __end_of_straight:
   643                           	opt stack 0
   644                           tblptru	equ	0xFF8
   645                           status	equ	0xFD8
   646                           
   647 ;; *************** function _small_right_down *****************
   648 ;; Defined at:
   649 ;;		line 44 in file "sample.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  2   37[None  ] int 
   656 ;; Registers used:
   657 ;;		wreg, status,2, status,0, cstack
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   663 ;;      Params:         0       0       0       0       0       0       0       0       0
   664 ;;      Locals:         0       0       0       0       0       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0       0       0       0       0
   666 ;;      Totals:         0       0       0       0       0       0       0       0       0
   667 ;;Total ram usage:        0 bytes
   668 ;; Hardware stack levels used:    1
   669 ;; Hardware stack levels required when called:    1
   670 ;; This function calls:
   671 ;;		_wait00
   672 ;; This function is called by:
   673 ;;		_main
   674 ;; This function uses a non-reentrant model
   675 ;;
   676                           
   677                           	psect	text2
   678  007D4A                     __ptext2:
   679                           	opt stack 0
   680  007D4A                     _small_right_down:
   681                           	opt stack 29
   682                           
   683                           ;sample.c: 45: PORTC=0x03;
   684                           
   685                           ;incstack = 0
   686  007D4A  0E03               	movlw	3
   687  007D4C  6E82               	movwf	3970,c	;volatile
   688                           
   689                           ;sample.c: 46: wait00(0.1);
   690  007D4E  0E00               	movlw	0
   691  007D50  6E02               	movwf	wait00@k+1,c
   692  007D52  0E00               	movlw	0
   693  007D54  6E01               	movwf	wait00@k,c
   694  007D56  ECD8  F03E         	call	_wait00	;wreg free
   695                           
   696                           ;sample.c: 47: PORTC=0x01;
   697  007D5A  0E01               	movlw	1
   698  007D5C  6E82               	movwf	3970,c	;volatile
   699                           
   700                           ;sample.c: 48: wait00(10);
   701  007D5E  0E00               	movlw	0
   702  007D60  6E02               	movwf	wait00@k+1,c
   703  007D62  0E0A               	movlw	10
   704  007D64  6E01               	movwf	wait00@k,c
   705  007D66  ECD8  F03E         	call	_wait00	;wreg free
   706                           
   707                           ;sample.c: 49: PORTC=0x00;
   708  007D6A  0E00               	movlw	0
   709  007D6C  6E82               	movwf	3970,c	;volatile
   710                           
   711                           ;sample.c: 50: wait00(20);
   712  007D6E  0E00               	movlw	0
   713  007D70  6E02               	movwf	wait00@k+1,c
   714  007D72  0E14               	movlw	20
   715  007D74  6E01               	movwf	wait00@k,c
   716  007D76  ECD8  F03E         	call	_wait00	;wreg free
   717  007D7A  0012               	return		;funcret
   718  007D7C                     __end_of_small_right_down:
   719                           	opt stack 0
   720                           tblptru	equ	0xFF8
   721                           status	equ	0xFD8
   722                           
   723 ;; *************** function _small_left_down *****************
   724 ;; Defined at:
   725 ;;		line 26 in file "sample.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;		None
   730 ;; Return value:  Size  Location     Type
   731 ;;                  2   31[None  ] int 
   732 ;; Registers used:
   733 ;;		wreg, status,2, status,0, cstack
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   739 ;;      Params:         0       0       0       0       0       0       0       0       0
   740 ;;      Locals:         0       0       0       0       0       0       0       0       0
   741 ;;      Temps:          0       0       0       0       0       0       0       0       0
   742 ;;      Totals:         0       0       0       0       0       0       0       0       0
   743 ;;Total ram usage:        0 bytes
   744 ;; Hardware stack levels used:    1
   745 ;; Hardware stack levels required when called:    1
   746 ;; This function calls:
   747 ;;		_wait00
   748 ;; This function is called by:
   749 ;;		_main
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753                           	psect	text3
   754  007D18                     __ptext3:
   755                           	opt stack 0
   756  007D18                     _small_left_down:
   757                           	opt stack 29
   758                           
   759                           ;sample.c: 27: PORTC=0x03;
   760                           
   761                           ;incstack = 0
   762  007D18  0E03               	movlw	3
   763  007D1A  6E82               	movwf	3970,c	;volatile
   764                           
   765                           ;sample.c: 28: wait00(0.1);
   766  007D1C  0E00               	movlw	0
   767  007D1E  6E02               	movwf	wait00@k+1,c
   768  007D20  0E00               	movlw	0
   769  007D22  6E01               	movwf	wait00@k,c
   770  007D24  ECD8  F03E         	call	_wait00	;wreg free
   771                           
   772                           ;sample.c: 29: PORTC=0x02;
   773  007D28  0E02               	movlw	2
   774  007D2A  6E82               	movwf	3970,c	;volatile
   775                           
   776                           ;sample.c: 30: wait00(10);
   777  007D2C  0E00               	movlw	0
   778  007D2E  6E02               	movwf	wait00@k+1,c
   779  007D30  0E0A               	movlw	10
   780  007D32  6E01               	movwf	wait00@k,c
   781  007D34  ECD8  F03E         	call	_wait00	;wreg free
   782                           
   783                           ;sample.c: 31: PORTC=0x00;
   784  007D38  0E00               	movlw	0
   785  007D3A  6E82               	movwf	3970,c	;volatile
   786                           
   787                           ;sample.c: 32: wait00(20);
   788  007D3C  0E00               	movlw	0
   789  007D3E  6E02               	movwf	wait00@k+1,c
   790  007D40  0E14               	movlw	20
   791  007D42  6E01               	movwf	wait00@k,c
   792  007D44  ECD8  F03E         	call	_wait00	;wreg free
   793  007D48  0012               	return		;funcret
   794  007D4A                     __end_of_small_left_down:
   795                           	opt stack 0
   796                           tblptru	equ	0xFF8
   797                           status	equ	0xFD8
   798                           
   799 ;; *************** function _right_down *****************
   800 ;; Defined at:
   801 ;;		line 35 in file "sample.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;		None
   806 ;; Return value:  Size  Location     Type
   807 ;;                  2   34[None  ] int 
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   815 ;;      Params:         0       0       0       0       0       0       0       0       0
   816 ;;      Locals:         0       0       0       0       0       0       0       0       0
   817 ;;      Temps:          0       0       0       0       0       0       0       0       0
   818 ;;      Totals:         0       0       0       0       0       0       0       0       0
   819 ;;Total ram usage:        0 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    1
   822 ;; This function calls:
   823 ;;		_wait00
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text4
   830  007CE6                     __ptext4:
   831                           	opt stack 0
   832  007CE6                     _right_down:
   833                           	opt stack 29
   834                           
   835                           ;sample.c: 36: PORTC=0x03;
   836                           
   837                           ;incstack = 0
   838  007CE6  0E03               	movlw	3
   839  007CE8  6E82               	movwf	3970,c	;volatile
   840                           
   841                           ;sample.c: 37: wait00(0.1);
   842  007CEA  0E00               	movlw	0
   843  007CEC  6E02               	movwf	wait00@k+1,c
   844  007CEE  0E00               	movlw	0
   845  007CF0  6E01               	movwf	wait00@k,c
   846  007CF2  ECD8  F03E         	call	_wait00	;wreg free
   847                           
   848                           ;sample.c: 38: PORTC=0x01;
   849  007CF6  0E01               	movlw	1
   850  007CF8  6E82               	movwf	3970,c	;volatile
   851                           
   852                           ;sample.c: 39: wait00(20);
   853  007CFA  0E00               	movlw	0
   854  007CFC  6E02               	movwf	wait00@k+1,c
   855  007CFE  0E14               	movlw	20
   856  007D00  6E01               	movwf	wait00@k,c
   857  007D02  ECD8  F03E         	call	_wait00	;wreg free
   858                           
   859                           ;sample.c: 40: PORTC=0x00;
   860  007D06  0E00               	movlw	0
   861  007D08  6E82               	movwf	3970,c	;volatile
   862                           
   863                           ;sample.c: 41: wait00(20);
   864  007D0A  0E00               	movlw	0
   865  007D0C  6E02               	movwf	wait00@k+1,c
   866  007D0E  0E14               	movlw	20
   867  007D10  6E01               	movwf	wait00@k,c
   868  007D12  ECD8  F03E         	call	_wait00	;wreg free
   869  007D16  0012               	return		;funcret
   870  007D18                     __end_of_right_down:
   871                           	opt stack 0
   872                           tblptru	equ	0xFF8
   873                           status	equ	0xFD8
   874                           
   875 ;; *************** function _left_down *****************
   876 ;; Defined at:
   877 ;;		line 17 in file "sample.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  2   28[None  ] int 
   884 ;; Registers used:
   885 ;;		wreg, status,2, status,0, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   891 ;;      Params:         0       0       0       0       0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0       0       0       0       0
   893 ;;      Temps:          0       0       0       0       0       0       0       0       0
   894 ;;      Totals:         0       0       0       0       0       0       0       0       0
   895 ;;Total ram usage:        0 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    1
   898 ;; This function calls:
   899 ;;		_wait00
   900 ;; This function is called by:
   901 ;;		_main
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text5
   906  007CB4                     __ptext5:
   907                           	opt stack 0
   908  007CB4                     _left_down:
   909                           	opt stack 29
   910                           
   911                           ;sample.c: 18: PORTC=0x03;
   912                           
   913                           ;incstack = 0
   914  007CB4  0E03               	movlw	3
   915  007CB6  6E82               	movwf	3970,c	;volatile
   916                           
   917                           ;sample.c: 19: wait00(0.1);
   918  007CB8  0E00               	movlw	0
   919  007CBA  6E02               	movwf	wait00@k+1,c
   920  007CBC  0E00               	movlw	0
   921  007CBE  6E01               	movwf	wait00@k,c
   922  007CC0  ECD8  F03E         	call	_wait00	;wreg free
   923                           
   924                           ;sample.c: 20: PORTC=0x02;
   925  007CC4  0E02               	movlw	2
   926  007CC6  6E82               	movwf	3970,c	;volatile
   927                           
   928                           ;sample.c: 21: wait00(20);
   929  007CC8  0E00               	movlw	0
   930  007CCA  6E02               	movwf	wait00@k+1,c
   931  007CCC  0E14               	movlw	20
   932  007CCE  6E01               	movwf	wait00@k,c
   933  007CD0  ECD8  F03E         	call	_wait00	;wreg free
   934                           
   935                           ;sample.c: 22: PORTC=0x00;
   936  007CD4  0E00               	movlw	0
   937  007CD6  6E82               	movwf	3970,c	;volatile
   938                           
   939                           ;sample.c: 23: wait00(20);
   940  007CD8  0E00               	movlw	0
   941  007CDA  6E02               	movwf	wait00@k+1,c
   942  007CDC  0E14               	movlw	20
   943  007CDE  6E01               	movwf	wait00@k,c
   944  007CE0  ECD8  F03E         	call	_wait00	;wreg free
   945  007CE4  0012               	return		;funcret
   946  007CE6                     __end_of_left_down:
   947                           	opt stack 0
   948                           tblptru	equ	0xFF8
   949                           status	equ	0xFD8
   950                           
   951 ;; *************** function _led_sens *****************
   952 ;; Defined at:
   953 ;;		line 68 in file "sample.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;		None
   956 ;; Auto vars:     Size  Location     Type
   957 ;;		None
   958 ;; Return value:  Size  Location     Type
   959 ;;                  2   46[None  ] int 
   960 ;; Registers used:
   961 ;;		None
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   967 ;;      Params:         0       0       0       0       0       0       0       0       0
   968 ;;      Locals:         0       0       0       0       0       0       0       0       0
   969 ;;      Temps:          0       0       0       0       0       0       0       0       0
   970 ;;      Totals:         0       0       0       0       0       0       0       0       0
   971 ;;Total ram usage:        0 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_main
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text6
   981  007D7C                     __ptext6:
   982                           	opt stack 0
   983  007D7C                     _led_sens:
   984                           	opt stack 30
   985                           
   986                           ;sample.c: 70: PORTAbits.RA0 = PORTBbits.RB0;
   987                           
   988                           ;incstack = 0
   989  007D7C  A081               	btfss	3969,0,c	;volatile
   990  007D7E  D002               	bra	u45
   991  007D80  8080               	bsf	3968,0,c	;volatile
   992  007D82  D001               	bra	u47
   993  007D84                     u45:
   994  007D84  9080               	bcf	3968,0,c	;volatile
   995  007D86                     u47:
   996                           
   997                           ;sample.c: 71: PORTAbits.RA1 = PORTBbits.RB1;
   998  007D86  A281               	btfss	3969,1,c	;volatile
   999  007D88  D002               	bra	u55
  1000  007D8A  8280               	bsf	3968,1,c	;volatile
  1001  007D8C  D001               	bra	u57
  1002  007D8E                     u55:
  1003  007D8E  9280               	bcf	3968,1,c	;volatile
  1004  007D90                     u57:
  1005                           
  1006                           ;sample.c: 72: PORTAbits.RA2 = PORTBbits.RB2;
  1007  007D90  A481               	btfss	3969,2,c	;volatile
  1008  007D92  D002               	bra	u65
  1009  007D94  8480               	bsf	3968,2,c	;volatile
  1010  007D96  D001               	bra	u67
  1011  007D98                     u65:
  1012  007D98  9480               	bcf	3968,2,c	;volatile
  1013  007D9A                     u67:
  1014                           
  1015                           ;sample.c: 73: PORTAbits.RA3 = PORTBbits.RB3;
  1016  007D9A  A681               	btfss	3969,3,c	;volatile
  1017  007D9C  D002               	bra	u75
  1018  007D9E  8680               	bsf	3968,3,c	;volatile
  1019  007DA0  D001               	bra	u77
  1020  007DA2                     u75:
  1021  007DA2  9680               	bcf	3968,3,c	;volatile
  1022  007DA4                     u77:
  1023                           
  1024                           ;sample.c: 74: PORTAbits.RA4 = PORTBbits.RB4;
  1025  007DA4  A881               	btfss	3969,4,c	;volatile
  1026  007DA6  D002               	bra	u85
  1027  007DA8  8880               	bsf	3968,4,c	;volatile
  1028  007DAA  D001               	bra	u87
  1029  007DAC                     u85:
  1030  007DAC  9880               	bcf	3968,4,c	;volatile
  1031  007DAE                     u87:
  1032  007DAE  0012               	return		;funcret
  1033  007DB0                     __end_of_led_sens:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           status	equ	0xFD8
  1037                           
  1038 ;; *************** function _do_sth *****************
  1039 ;; Defined at:
  1040 ;;		line 61 in file "sample.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;		None
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;		None
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  2   43[None  ] int 
  1047 ;; Registers used:
  1048 ;;		wreg, status,2, status,0, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1054 ;;      Params:         0       0       0       0       0       0       0       0       0
  1055 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1056 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1057 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1058 ;;Total ram usage:        0 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    1
  1061 ;; This function calls:
  1062 ;;		_wait00
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text7
  1069  007C70                     __ptext7:
  1070                           	opt stack 0
  1071  007C70                     _do_sth:
  1072                           	opt stack 29
  1073                           
  1074                           ;sample.c: 62: PORTC=0x03;
  1075                           
  1076                           ;incstack = 0
  1077  007C70  0E03               	movlw	3
  1078  007C72  6E82               	movwf	3970,c	;volatile
  1079                           
  1080                           ;sample.c: 63: wait00(0.5);
  1081  007C74  0E00               	movlw	0
  1082  007C76  6E02               	movwf	wait00@k+1,c
  1083  007C78  0E00               	movlw	0
  1084  007C7A  6E01               	movwf	wait00@k,c
  1085  007C7C  ECD8  F03E         	call	_wait00	;wreg free
  1086                           
  1087                           ;sample.c: 64: PORTC=0x00;
  1088  007C80  0E00               	movlw	0
  1089  007C82  6E82               	movwf	3970,c	;volatile
  1090                           
  1091                           ;sample.c: 65: wait00(20);
  1092  007C84  0E00               	movlw	0
  1093  007C86  6E02               	movwf	wait00@k+1,c
  1094  007C88  0E14               	movlw	20
  1095  007C8A  6E01               	movwf	wait00@k,c
  1096  007C8C  ECD8  F03E         	call	_wait00	;wreg free
  1097  007C90  0012               	return		;funcret
  1098  007C92                     __end_of_do_sth:
  1099                           	opt stack 0
  1100                           tblptru	equ	0xFF8
  1101                           status	equ	0xFD8
  1102                           
  1103 ;; *************** function _wait00 *****************
  1104 ;; Defined at:
  1105 ;;		line 6 in file "sample.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;  k               2    0[COMRAM] short 
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;  i               2    5[COMRAM] short 
  1110 ;;  j               2    3[COMRAM] short 
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  2    0[COMRAM] int 
  1113 ;; Registers used:
  1114 ;;		wreg, status,2, status,0
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1120 ;;      Params:         2       0       0       0       0       0       0       0       0
  1121 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1122 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1123 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1124 ;;Total ram usage:        7 bytes
  1125 ;; Hardware stack levels used:    1
  1126 ;; This function calls:
  1127 ;;		Nothing
  1128 ;; This function is called by:
  1129 ;;		_left_down
  1130 ;;		_small_left_down
  1131 ;;		_right_down
  1132 ;;		_small_right_down
  1133 ;;		_straight
  1134 ;;		_do_sth
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text8
  1139  007DB0                     __ptext8:
  1140                           	opt stack 0
  1141  007DB0                     _wait00:
  1142                           	opt stack 29
  1143                           
  1144                           ;sample.c: 9: short i;
  1145                           ;sample.c: 10: short j;
  1146                           ;sample.c: 11: for(j=0;j<k;j++){
  1147                           
  1148                           ;incstack = 0
  1149  007DB0  0E00               	movlw	0
  1150  007DB2  6E05               	movwf	wait00@j+1,c
  1151  007DB4  0E00               	movlw	0
  1152  007DB6  6E04               	movwf	wait00@j,c
  1153  007DB8  D011               	goto	l21
  1154  007DBA                     
  1155                           ;sample.c: 12: for(i=0;i<3000;i++){
  1156  007DBA  0E00               	movlw	0
  1157  007DBC  6E07               	movwf	wait00@i+1,c
  1158  007DBE  0E00               	movlw	0
  1159  007DC0  6E06               	movwf	wait00@i,c
  1160  007DC2                     l1003:
  1161  007DC2  BE07               	btfsc	wait00@i+1,7,c
  1162  007DC4  D006               	goto	l23
  1163  007DC6  0EB8               	movlw	184
  1164  007DC8  5C06               	subwf	wait00@i,w,c
  1165  007DCA  0E0B               	movlw	11
  1166  007DCC  5807               	subwfb	wait00@i+1,w,c
  1167  007DCE  B0D8               	btfsc	status,0,c
  1168  007DD0  D003               	goto	u860
  1169  007DD2                     l23:
  1170  007DD2  4A06               	infsnz	wait00@i,f,c
  1171  007DD4  2A07               	incf	wait00@i+1,f,c
  1172  007DD6  D7F5               	goto	l1003
  1173  007DD8                     u860:
  1174  007DD8  4A04               	infsnz	wait00@j,f,c
  1175  007DDA  2A05               	incf	wait00@j+1,f,c
  1176  007DDC                     l21:
  1177  007DDC  5001               	movf	wait00@k,w,c
  1178  007DDE  5C04               	subwf	wait00@j,w,c
  1179  007DE0  5005               	movf	wait00@j+1,w,c
  1180  007DE2  0A80               	xorlw	128
  1181  007DE4  6E03               	movwf	??_wait00& (0+255),c
  1182  007DE6  5002               	movf	wait00@k+1,w,c
  1183  007DE8  0A80               	xorlw	128
  1184  007DEA  5803               	subwfb	??_wait00& (0+255),w,c
  1185  007DEC  B0D8               	btfsc	status,0,c
  1186  007DEE  0012               	return	
  1187  007DF0  D7E4               	goto	l22
  1188  007DF2                     __end_of_wait00:
  1189                           	opt stack 0
  1190  0000                     tblptru	equ	0xFF8
  1191                           status	equ	0xFD8
  1192                           tblptru	equ	0xFF8
  1193                           status	equ	0xFD8
  1194                           
  1195                           	psect	rparam
  1196  0000                     tblptru	equ	0xFF8
  1197                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _straight->_wait00
    _small_right_down->_wait00
    _small_left_down->_wait00
    _right_down->_wait00
    _left_down->_wait00
    _do_sth->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7848
                             _do_sth
                           _led_sens
                          _left_down
                         _right_down
                    _small_left_down
                   _small_right_down
                           _straight
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _small_right_down                                     0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _small_left_down                                      0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _right_down                                           0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _left_down                                            0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _do_sth                                               0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2    1308
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _do_sth
     _wait00
   _led_sens
   _left_down
     _wait00
   _right_down
     _wait00
   _small_left_down
     _wait00
   _small_right_down
     _wait00
   _straight
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      7       7       1        7.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 28 16:01:38 2018

                       l21 7DDC                         l22 7DBA                         l23 7DD2  
                       l60 7E50                         l52 7E12                         l61 7E2C  
                       l53 7E0E                         l70 7E60                         l63 7E38  
                       l56 7FE8                         l80 7E94                         l72 7E6C  
                       l65 7E44                         l58 7EEC                         l82 7EA0  
                       l74 7E78                         l91 7ED4                         l59 7E1C  
                       l84 7EAC                         l93 7EE0                         l78 7E84  
                       l79 7EB8                         l89 7EC8                         l99 7FD0  
                       u45 7D84                         u55 7D8E                         u47 7D86  
                       u65 7D98                         u57 7D90                         u75 7DA2  
                       u67 7D9A                         u85 7DAC                         u77 7DA4  
                       u87 7DAE                        l100 7F04                        l101 7F38  
                      l102 7F14                        l111 7F48                        l120 7FA0  
                      l104 7F20                        l121 7F7C                        l113 7F54  
                      l130 7FB0                        l106 7F2C                        l123 7F88  
                      l115 7F60                        l132 7FBC                        l125 7F94  
                      l134 7FC4                        l119 7F6C                        u860 7DD8  
                      u880 7E16                       l1003 7DC2                       u1250 7EF4  
                     u1256 7EF6                       u1620 7FD8                       u1630 7FF0  
                     u1626 7FDA                       u1636 7FF2                       _main 7DF2  
                     start 2000               ___param_bank 000000                      ?_main 0001  
                    _PORTA 000F80                      _PORTB 000F81                      _PORTC 000F82  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
__size_of_small_right_down 0032            _small_left_down 7D18                      status 000FD8  
          __initialization 7C66               __end_of_main 8000                     ??_main 0008  
            __activetblptr 000002                     _ADCON1 000FC1           __end_of_led_sens 7DB0  
                   _do_sth 7C70                     _wait00 7DB0                     tblptru 000FF8  
  __end_of_small_left_down 7D4A           __end_of_straight 7CB4                 __accesstop 0060  
  __end_of__initialization 7C66              ___rparam_used 000001             __pcstackCOMRAM 0001  
         _small_right_down 7D4A         __size_of_left_down 0032                    ?_do_sth 0001  
                  ?_wait00 0001           ?_small_left_down 0001                  ?_led_sens 0001  
                  __Hparam 0000                    __Lparam 0000            __size_of_do_sth 0022  
                ?_straight 0001                    __pcinit 7C66                    __ramtop 0800  
          __size_of_wait00 0042          __end_of_left_down 7CE6                    __ptext0 7DF2  
                  __ptext1 7C92                    __ptext2 7D4A                    __ptext3 7D18  
                  __ptext4 7CE6                    __ptext5 7CB4                    __ptext6 7D7C  
                  __ptext7 7C70                    __ptext8 7DB0       end_of_initialization 7C66  
               ??_led_sens 0001              __Lmediumconst 0000                    wait00@i 0006  
                  wait00@j 0004                    wait00@k 0001                 _right_down 7CE6  
               ??_straight 0008                  _PORTAbits 000F80                  _PORTBbits 000F81  
 __end_of_small_right_down 7D7C             __end_of_do_sth 7C92             __end_of_wait00 7DF2  
      start_initialization 7C66                ?_right_down 0001                   ??_do_sth 0008  
                 ??_wait00 0003          __size_of_led_sens 0034          __size_of_straight 0022  
                _left_down 7CB4        __size_of_right_down 0032   __size_of_small_left_down 0032  
               ?_left_down 0001                   __Hrparam 0000                   __Lrparam 0000  
        ?_small_right_down 0001         ??_small_right_down 0008                   _led_sens 7D7C  
            __size_of_main 020E               ??_right_down 0008          ??_small_left_down 0008  
                 _straight 7C92                ??_left_down 0008         __end_of_right_down 7D18  
