

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Feb 22 15:28:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15  0000                     
    16                           ; Version 1.45
    17                           ; Generated 16/11/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F2553 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     _PORTB	set	3969
    51  0000                     _PORTA	set	3968
    52  0000                     _TRISC	set	3988
    53  0000                     _TRISB	set	3987
    54  0000                     _TRISA	set	3986
    55  0000                     _ADCON1	set	4033
    56  0000                     _PORTBbits	set	3969
    57  0000                     _PORTAbits	set	3968
    58  0000                     _PORTC	set	3970
    59                           
    60                           ; #config settings
    61                           
    62                           	psect	cinit
    63  007E94                     __pcinit:
    64                           	opt stack 0
    65  007E94                     start_initialization:
    66                           	opt stack 0
    67  007E94                     __initialization:
    68                           	opt stack 0
    69  007E94                     end_of_initialization:
    70                           	opt stack 0
    71  007E94                     __end_of__initialization:
    72                           	opt stack 0
    73  007E94  0100               	movlb	0
    74  007E96  EFB1  F03F         	goto	_main	;jump to C main() function
    75                           
    76                           	psect	cstackCOMRAM
    77  000001                     __pcstackCOMRAM:
    78                           	opt stack 0
    79  000001                     ??_led_sens:
    80  000001                     wait00@k:
    81                           	opt stack 0
    82                           
    83                           ; 2 bytes @ 0x0
    84  000001                     	ds	2
    85  000003                     ??_wait00:
    86                           
    87                           ; 1 bytes @ 0x2
    88  000003                     	ds	1
    89  000004                     wait00@j:
    90                           	opt stack 0
    91                           
    92                           ; 2 bytes @ 0x3
    93  000004                     	ds	2
    94  000006                     wait00@i:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x5
    98  000006                     	ds	2
    99  000008                     
   100                           ; 1 bytes @ 0x7
   101 ;;
   102 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   103 ;;
   104 ;; *************** function _main *****************
   105 ;; Defined at:
   106 ;;		line 50 in file "sample.c"
   107 ;; Parameters:    Size  Location     Type
   108 ;;		None
   109 ;; Auto vars:     Size  Location     Type
   110 ;;		None
   111 ;; Return value:  Size  Location     Type
   112 ;;                  2   42[None  ] int 
   113 ;; Registers used:
   114 ;;		wreg, status,2, status,0, cstack
   115 ;; Tracked objects:
   116 ;;		On entry : 0/0
   117 ;;		On exit  : 0/0
   118 ;;		Unchanged: 0/0
   119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   120 ;;      Params:         0       0       0       0       0       0       0       0       0
   121 ;;      Locals:         0       0       0       0       0       0       0       0       0
   122 ;;      Temps:          0       0       0       0       0       0       0       0       0
   123 ;;      Totals:         0       0       0       0       0       0       0       0       0
   124 ;;Total ram usage:        0 bytes
   125 ;; Hardware stack levels required when called:    2
   126 ;; This function calls:
   127 ;;		_led_sens
   128 ;;		_left_down
   129 ;;		_right_down
   130 ;;		_straight
   131 ;; This function is called by:
   132 ;;		Startup code after reset
   133 ;; This function uses a non-reentrant model
   134 ;;
   135                           
   136                           	psect	text0
   137  007F62                     __ptext0:
   138                           	opt stack 0
   139  007F62                     _main:
   140                           	opt stack 29
   141                           
   142                           ;sample.c: 53: ADCON1 = 0x0F;
   143                           
   144                           ;incstack = 0
   145  007F62  0E0F               	movlw	15
   146  007F64  6EC1               	movwf	4033,c	;volatile
   147                           
   148                           ;sample.c: 56: TRISA = 0x20;
   149  007F66  0E20               	movlw	32
   150  007F68  6E92               	movwf	3986,c	;volatile
   151                           
   152                           ;sample.c: 57: TRISB = 0xFF;
   153  007F6A  6893               	setf	3987,c	;volatile
   154                           
   155                           ;sample.c: 58: TRISC = 0x00;
   156  007F6C  0E00               	movlw	0
   157  007F6E  6E94               	movwf	3988,c	;volatile
   158                           
   159                           ;sample.c: 61: PORTA = 0x00;
   160  007F70  0E00               	movlw	0
   161  007F72  6E80               	movwf	3968,c	;volatile
   162                           
   163                           ;sample.c: 62: PORTB = 0x00;
   164  007F74  0E00               	movlw	0
   165  007F76  6E81               	movwf	3969,c	;volatile
   166                           
   167                           ;sample.c: 63: PORTC = 0x00;
   168  007F78  0E00               	movlw	0
   169  007F7A  6E82               	movwf	3970,c	;volatile
   170                           
   171                           ;sample.c: 66: while(PORTAbits.RA5==1){
   172  007F7C  D002               	goto	l43
   173  007F7E                     
   174                           ;sample.c: 67: led_sens();
   175  007F7E  ECD8  F03F         	call	_led_sens	;wreg free
   176  007F82                     l43:
   177  007F82  BA80               	btfsc	3968,5,c	;volatile
   178  007F84  D7FC               	goto	l44
   179  007F86                     u170:
   180                           
   181                           ;sample.c: 73: led_sens();
   182                           
   183                           ;sample.c: 68: }
   184                           ;sample.c: 72: while(1){
   185  007F86  ECD8  F03F         	call	_led_sens	;wreg free
   186                           
   187                           ;sample.c: 74: if(PORTBbits.RB0==1 && PORTBbits.RB2==1 && PORTBbits.RB4==0){
   188  007F8A  B081               	btfsc	3969,0,c	;volatile
   189  007F8C  A481               	btfss	3969,2,c	;volatile
   190  007F8E  D005               	goto	l47
   191  007F90  B881               	btfsc	3969,4,c	;volatile
   192  007F92  D003               	goto	l47
   193                           
   194                           ;sample.c: 76: left_down();
   195  007F94  EC5E  F03F         	call	_left_down	;wreg free
   196                           
   197                           ;sample.c: 77: }
   198  007F98  D7F6               	goto	u170
   199  007F9A                     l47:
   200                           
   201                           ;sample.c: 78: else if(PORTBbits.RB0==0 && PORTBbits.RB2==1 && PORTBbits.RB4==1){
   202  007F9A  A081               	btfss	3969,0,c	;volatile
   203  007F9C  A481               	btfss	3969,2,c	;volatile
   204  007F9E  D005               	goto	l49
   205  007FA0  A881               	btfss	3969,4,c	;volatile
   206  007FA2  D003               	goto	l49
   207                           
   208                           ;sample.c: 80: right_down();
   209  007FA4  EC77  F03F         	call	_right_down	;wreg free
   210                           
   211                           ;sample.c: 81: }
   212  007FA8  D7EE               	goto	u170
   213  007FAA                     l49:
   214                           
   215                           ;sample.c: 82: else{
   216                           ;sample.c: 83: straight();
   217  007FAA  EC4D  F03F         	call	_straight	;wreg free
   218  007FAE  D7EB               	goto	u170
   219  007FB0                     __end_of_main:
   220                           	opt stack 0
   221                           
   222 ;; *************** function _straight *****************
   223 ;; Defined at:
   224 ;;		line 36 in file "sample.c"
   225 ;; Parameters:    Size  Location     Type
   226 ;;		None
   227 ;; Auto vars:     Size  Location     Type
   228 ;;		None
   229 ;; Return value:  Size  Location     Type
   230 ;;                  2   34[None  ] int 
   231 ;; Registers used:
   232 ;;		wreg, status,2, status,0, cstack
   233 ;; Tracked objects:
   234 ;;		On entry : 0/0
   235 ;;		On exit  : 0/0
   236 ;;		Unchanged: 0/0
   237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   238 ;;      Params:         0       0       0       0       0       0       0       0       0
   239 ;;      Locals:         0       0       0       0       0       0       0       0       0
   240 ;;      Temps:          0       0       0       0       0       0       0       0       0
   241 ;;      Totals:         0       0       0       0       0       0       0       0       0
   242 ;;Total ram usage:        0 bytes
   243 ;; Hardware stack levels used:    1
   244 ;; Hardware stack levels required when called:    1
   245 ;; This function calls:
   246 ;;		_wait00
   247 ;; This function is called by:
   248 ;;		_main
   249 ;; This function uses a non-reentrant model
   250 ;;
   251                           
   252                           	psect	text1
   253  007E9A                     __ptext1:
   254                           	opt stack 0
   255  007E9A                     _straight:
   256                           	opt stack 29
   257                           
   258                           ;sample.c: 37: PORTC=0x03;
   259                           
   260                           ;incstack = 0
   261  007E9A  0E03               	movlw	3
   262  007E9C  6E82               	movwf	3970,c	;volatile
   263                           
   264                           ;sample.c: 38: wait00(8);
   265  007E9E  0E00               	movlw	0
   266  007EA0  6E02               	movwf	wait00@k+1,c
   267  007EA2  0E08               	movlw	8
   268  007EA4  6E01               	movwf	wait00@k,c
   269  007EA6  EC90  F03F         	call	_wait00	;wreg free
   270                           
   271                           ;sample.c: 39: PORTC=0x00;
   272  007EAA  0E00               	movlw	0
   273  007EAC  6E82               	movwf	3970,c	;volatile
   274                           
   275                           ;sample.c: 40: wait00(20);
   276  007EAE  0E00               	movlw	0
   277  007EB0  6E02               	movwf	wait00@k+1,c
   278  007EB2  0E14               	movlw	20
   279  007EB4  6E01               	movwf	wait00@k,c
   280  007EB6  EC90  F03F         	call	_wait00	;wreg free
   281  007EBA  0012               	return		;funcret
   282  007EBC                     __end_of_straight:
   283                           	opt stack 0
   284                           
   285 ;; *************** function _right_down *****************
   286 ;; Defined at:
   287 ;;		line 27 in file "sample.c"
   288 ;; Parameters:    Size  Location     Type
   289 ;;		None
   290 ;; Auto vars:     Size  Location     Type
   291 ;;		None
   292 ;; Return value:  Size  Location     Type
   293 ;;                  2   31[None  ] int 
   294 ;; Registers used:
   295 ;;		wreg, status,2, status,0, cstack
   296 ;; Tracked objects:
   297 ;;		On entry : 0/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   301 ;;      Params:         0       0       0       0       0       0       0       0       0
   302 ;;      Locals:         0       0       0       0       0       0       0       0       0
   303 ;;      Temps:          0       0       0       0       0       0       0       0       0
   304 ;;      Totals:         0       0       0       0       0       0       0       0       0
   305 ;;Total ram usage:        0 bytes
   306 ;; Hardware stack levels used:    1
   307 ;; Hardware stack levels required when called:    1
   308 ;; This function calls:
   309 ;;		_wait00
   310 ;; This function is called by:
   311 ;;		_main
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315                           	psect	text2
   316  007EEE                     __ptext2:
   317                           	opt stack 0
   318  007EEE                     _right_down:
   319                           	opt stack 29
   320                           
   321                           ;sample.c: 28: PORTC=0x03;
   322                           
   323                           ;incstack = 0
   324  007EEE  0E03               	movlw	3
   325  007EF0  6E82               	movwf	3970,c	;volatile
   326                           
   327                           ;sample.c: 29: wait00(0.3);
   328  007EF2  0E00               	movlw	0
   329  007EF4  6E02               	movwf	wait00@k+1,c
   330  007EF6  0E00               	movlw	0
   331  007EF8  6E01               	movwf	wait00@k,c
   332  007EFA  EC90  F03F         	call	_wait00	;wreg free
   333                           
   334                           ;sample.c: 30: PORTC=0x02;
   335  007EFE  0E02               	movlw	2
   336  007F00  6E82               	movwf	3970,c	;volatile
   337                           
   338                           ;sample.c: 31: wait00(5);
   339  007F02  0E00               	movlw	0
   340  007F04  6E02               	movwf	wait00@k+1,c
   341  007F06  0E05               	movlw	5
   342  007F08  6E01               	movwf	wait00@k,c
   343  007F0A  EC90  F03F         	call	_wait00	;wreg free
   344                           
   345                           ;sample.c: 32: PORTC=0x00;
   346  007F0E  0E00               	movlw	0
   347  007F10  6E82               	movwf	3970,c	;volatile
   348                           
   349                           ;sample.c: 33: wait00(20);
   350  007F12  0E00               	movlw	0
   351  007F14  6E02               	movwf	wait00@k+1,c
   352  007F16  0E14               	movlw	20
   353  007F18  6E01               	movwf	wait00@k,c
   354  007F1A  EC90  F03F         	call	_wait00	;wreg free
   355  007F1E  0012               	return		;funcret
   356  007F20                     __end_of_right_down:
   357                           	opt stack 0
   358                           
   359 ;; *************** function _left_down *****************
   360 ;; Defined at:
   361 ;;		line 18 in file "sample.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;		None
   364 ;; Auto vars:     Size  Location     Type
   365 ;;		None
   366 ;; Return value:  Size  Location     Type
   367 ;;                  2   28[None  ] int 
   368 ;; Registers used:
   369 ;;		wreg, status,2, status,0, cstack
   370 ;; Tracked objects:
   371 ;;		On entry : 0/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   375 ;;      Params:         0       0       0       0       0       0       0       0       0
   376 ;;      Locals:         0       0       0       0       0       0       0       0       0
   377 ;;      Temps:          0       0       0       0       0       0       0       0       0
   378 ;;      Totals:         0       0       0       0       0       0       0       0       0
   379 ;;Total ram usage:        0 bytes
   380 ;; Hardware stack levels used:    1
   381 ;; Hardware stack levels required when called:    1
   382 ;; This function calls:
   383 ;;		_wait00
   384 ;; This function is called by:
   385 ;;		_main
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           	psect	text3
   390  007EBC                     __ptext3:
   391                           	opt stack 0
   392  007EBC                     _left_down:
   393                           	opt stack 29
   394                           
   395                           ;sample.c: 19: PORTC=0x03;
   396                           
   397                           ;incstack = 0
   398  007EBC  0E03               	movlw	3
   399  007EBE  6E82               	movwf	3970,c	;volatile
   400                           
   401                           ;sample.c: 20: wait00(0.3);
   402  007EC0  0E00               	movlw	0
   403  007EC2  6E02               	movwf	wait00@k+1,c
   404  007EC4  0E00               	movlw	0
   405  007EC6  6E01               	movwf	wait00@k,c
   406  007EC8  EC90  F03F         	call	_wait00	;wreg free
   407                           
   408                           ;sample.c: 21: PORTC=0x01;
   409  007ECC  0E01               	movlw	1
   410  007ECE  6E82               	movwf	3970,c	;volatile
   411                           
   412                           ;sample.c: 22: wait00(5);
   413  007ED0  0E00               	movlw	0
   414  007ED2  6E02               	movwf	wait00@k+1,c
   415  007ED4  0E05               	movlw	5
   416  007ED6  6E01               	movwf	wait00@k,c
   417  007ED8  EC90  F03F         	call	_wait00	;wreg free
   418                           
   419                           ;sample.c: 23: PORTC=0x00;
   420  007EDC  0E00               	movlw	0
   421  007EDE  6E82               	movwf	3970,c	;volatile
   422                           
   423                           ;sample.c: 24: wait00(20);
   424  007EE0  0E00               	movlw	0
   425  007EE2  6E02               	movwf	wait00@k+1,c
   426  007EE4  0E14               	movlw	20
   427  007EE6  6E01               	movwf	wait00@k,c
   428  007EE8  EC90  F03F         	call	_wait00	;wreg free
   429  007EEC  0012               	return		;funcret
   430  007EEE                     __end_of_left_down:
   431                           	opt stack 0
   432                           
   433 ;; *************** function _wait00 *****************
   434 ;; Defined at:
   435 ;;		line 6 in file "sample.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;  k               2    0[COMRAM] short 
   438 ;; Auto vars:     Size  Location     Type
   439 ;;  i               2    5[COMRAM] short 
   440 ;;  j               2    3[COMRAM] short 
   441 ;; Return value:  Size  Location     Type
   442 ;;                  2    0[COMRAM] int 
   443 ;; Registers used:
   444 ;;		wreg, status,2, status,0
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   450 ;;      Params:         2       0       0       0       0       0       0       0       0
   451 ;;      Locals:         4       0       0       0       0       0       0       0       0
   452 ;;      Temps:          1       0       0       0       0       0       0       0       0
   453 ;;      Totals:         7       0       0       0       0       0       0       0       0
   454 ;;Total ram usage:        7 bytes
   455 ;; Hardware stack levels used:    1
   456 ;; This function calls:
   457 ;;		Nothing
   458 ;; This function is called by:
   459 ;;		_left_down
   460 ;;		_right_down
   461 ;;		_straight
   462 ;; This function uses a non-reentrant model
   463 ;;
   464                           
   465                           	psect	text4
   466  007F20                     __ptext4:
   467                           	opt stack 0
   468  007F20                     _wait00:
   469                           	opt stack 29
   470                           
   471                           ;sample.c: 9: short i;
   472                           ;sample.c: 10: short j;
   473                           ;sample.c: 11: for(j=0;j<k;j++){
   474                           
   475                           ;incstack = 0
   476  007F20  0E00               	movlw	0
   477  007F22  6E05               	movwf	wait00@j+1,c
   478  007F24  0E00               	movlw	0
   479  007F26  6E04               	movwf	wait00@j,c
   480  007F28  D011               	goto	l21
   481  007F2A                     
   482                           ;sample.c: 12: for(i=0;i<3000;i++){
   483  007F2A  0E00               	movlw	0
   484  007F2C  6E07               	movwf	wait00@i+1,c
   485  007F2E  0E00               	movlw	0
   486  007F30  6E06               	movwf	wait00@i,c
   487  007F32                     l749:
   488  007F32  BE07               	btfsc	wait00@i+1,7,c
   489  007F34  D006               	goto	l23
   490  007F36  0EB8               	movlw	184
   491  007F38  5C06               	subwf	wait00@i,w,c
   492  007F3A  0E0B               	movlw	11
   493  007F3C  5807               	subwfb	wait00@i+1,w,c
   494  007F3E  B0D8               	btfsc	status,0,c
   495  007F40  D003               	goto	u150
   496  007F42                     l23:
   497  007F42  4A06               	infsnz	wait00@i,f,c
   498  007F44  2A07               	incf	wait00@i+1,f,c
   499  007F46  D7F5               	goto	l749
   500  007F48                     u150:
   501  007F48  4A04               	infsnz	wait00@j,f,c
   502  007F4A  2A05               	incf	wait00@j+1,f,c
   503  007F4C                     l21:
   504  007F4C  5001               	movf	wait00@k,w,c
   505  007F4E  5C04               	subwf	wait00@j,w,c
   506  007F50  5005               	movf	wait00@j+1,w,c
   507  007F52  0A80               	xorlw	128
   508  007F54  6E03               	movwf	??_wait00& (0+255),c
   509  007F56  5002               	movf	wait00@k+1,w,c
   510  007F58  0A80               	xorlw	128
   511  007F5A  5803               	subwfb	??_wait00& (0+255),w,c
   512  007F5C  B0D8               	btfsc	status,0,c
   513  007F5E  0012               	return	
   514  007F60  D7E4               	goto	l22
   515  007F62                     __end_of_wait00:
   516                           	opt stack 0
   517                           status	equ	0xFD8
   518                           
   519 ;; *************** function _led_sens *****************
   520 ;; Defined at:
   521 ;;		line 43 in file "sample.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;		None
   526 ;; Return value:  Size  Location     Type
   527 ;;                  2   37[None  ] int 
   528 ;; Registers used:
   529 ;;		wreg, status,2, status,0
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   535 ;;      Params:         0       0       0       0       0       0       0       0       0
   536 ;;      Locals:         0       0       0       0       0       0       0       0       0
   537 ;;      Temps:          1       0       0       0       0       0       0       0       0
   538 ;;      Totals:         1       0       0       0       0       0       0       0       0
   539 ;;Total ram usage:        1 bytes
   540 ;; Hardware stack levels used:    1
   541 ;; This function calls:
   542 ;;		Nothing
   543 ;; This function is called by:
   544 ;;		_main
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	text5
   549  007FB0                     __ptext5:
   550                           	opt stack 0
   551  007FB0                     _led_sens:
   552                           	opt stack 30
   553                           
   554                           ;sample.c: 45: PORTAbits.RA0 = ~PORTBbits.RB0;
   555                           
   556                           ;incstack = 0
   557  007FB0  A081               	btfss	3969,0,c	;volatile
   558  007FB2  D002               	goto	u40
   559  007FB4  0E01               	movlw	1
   560  007FB6  D001               	goto	u46
   561  007FB8                     u40:
   562  007FB8  0E00               	movlw	0
   563  007FBA                     u46:
   564  007FBA  0AFF               	xorlw	255
   565  007FBC  6E01               	movwf	??_led_sens& (0+255),c
   566  007FBE  5080               	movf	3968,w,c	;volatile
   567  007FC0  1801               	xorwf	??_led_sens,w,c
   568  007FC2  0BFE               	andlw	-2
   569  007FC4  1801               	xorwf	??_led_sens,w,c
   570  007FC6  6E80               	movwf	3968,c	;volatile
   571                           
   572                           ;sample.c: 46: PORTAbits.RA2 = ~PORTBbits.RB2;
   573  007FC8  A481               	btfss	3969,2,c	;volatile
   574  007FCA  D002               	goto	u50
   575  007FCC  0E01               	movlw	1
   576  007FCE  D001               	goto	u56
   577  007FD0                     u50:
   578  007FD0  0E00               	movlw	0
   579  007FD2                     u56:
   580  007FD2  0AFF               	xorlw	255
   581  007FD4  6E01               	movwf	??_led_sens& (0+255),c
   582  007FD6  4601               	rlncf	??_led_sens,f,c
   583  007FD8  4601               	rlncf	??_led_sens,f,c
   584  007FDA  5080               	movf	3968,w,c	;volatile
   585  007FDC  1801               	xorwf	??_led_sens,w,c
   586  007FDE  0BFB               	andlw	-5
   587  007FE0  1801               	xorwf	??_led_sens,w,c
   588  007FE2  6E80               	movwf	3968,c	;volatile
   589                           
   590                           ;sample.c: 47: PORTAbits.RA4 = ~PORTBbits.RB4;
   591  007FE4  A881               	btfss	3969,4,c	;volatile
   592  007FE6  D002               	goto	u60
   593  007FE8  0E01               	movlw	1
   594  007FEA  D001               	goto	u66
   595  007FEC                     u60:
   596  007FEC  0E00               	movlw	0
   597  007FEE                     u66:
   598  007FEE  0AFF               	xorlw	255
   599  007FF0  6E01               	movwf	??_led_sens& (0+255),c
   600  007FF2  3A01               	swapf	??_led_sens,f,c
   601  007FF4  5080               	movf	3968,w,c	;volatile
   602  007FF6  1801               	xorwf	??_led_sens,w,c
   603  007FF8  0BEF               	andlw	-17
   604  007FFA  1801               	xorwf	??_led_sens,w,c
   605  007FFC  6E80               	movwf	3968,c	;volatile
   606  007FFE  0012               	return		;funcret
   607  008000                     __end_of_led_sens:
   608                           	opt stack 0
   609  0000                     status	equ	0xFD8
   610                           status	equ	0xFD8
   611                           
   612                           	psect	rparam
   613  0000                     status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _straight->_wait00
    _right_down->_wait00
    _left_down->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2100
                           _led_sens
                          _left_down
                         _right_down
                           _straight
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0     700
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _right_down                                           0     0      0     700
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _left_down                                            0     0      0     700
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2     700
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _led_sens
   _left_down
     _wait00
   _right_down
     _wait00
   _straight
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      7       7       1        7.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Feb 22 15:28:30 2018

                     l21 7F4C                       l22 7F2A                       l23 7F42  
                     l43 7F82                       l44 7F7E                       l47 7F9A  
                     l49 7FAA                       u40 7FB8                       u50 7FD0  
                     u60 7FEC                       u46 7FBA                       u56 7FD2  
                     u66 7FEE                      l749 7F32                      u150 7F48  
                    u170 7F86                     _main 7F62                     start 2000  
           ___param_bank 000000                    ?_main 0001                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    status 000FD8  
        __initialization 7E94             __end_of_main 7FB0                   ??_main 0008  
          __activetblptr 000000                   _ADCON1 000FC1         __end_of_led_sens 8000  
                 _wait00 7F20         __end_of_straight 7EBC               __accesstop 0060  
__end_of__initialization 7E94            ___rparam_used 000001           __pcstackCOMRAM 0001  
     __size_of_left_down 0032                  ?_wait00 0001                ?_led_sens 0001  
                __Hparam 0000                  __Lparam 0000                ?_straight 0001  
                __pcinit 7E94                  __ramtop 0800          __size_of_wait00 0042  
      __end_of_left_down 7EEE                  __ptext0 7F62                  __ptext1 7E9A  
                __ptext2 7EEE                  __ptext3 7EBC                  __ptext4 7F20  
                __ptext5 7FB0     end_of_initialization 7E94               ??_led_sens 0001  
                wait00@i 0006                  wait00@j 0004                  wait00@k 0001  
             _right_down 7EEE               ??_straight 0008                _PORTAbits 000F80  
              _PORTBbits 000F81           __end_of_wait00 7F62      start_initialization 7E94  
            ?_right_down 0001                 ??_wait00 0003        __size_of_led_sens 0050  
      __size_of_straight 0022                _left_down 7EBC      __size_of_right_down 0032  
             ?_left_down 0001                 __Hrparam 0000                 __Lrparam 0000  
               _led_sens 7FB0            __size_of_main 004E             ??_right_down 0008  
               _straight 7E9A              ??_left_down 0008       __end_of_right_down 7F20  
